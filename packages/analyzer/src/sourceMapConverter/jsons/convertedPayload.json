{
  "0xbd82Cd2f7C2B8710A879580399CFbfF61c5020B9": {
    "sources": {
      "src/ClaimCODE.sol": {
        "sourceMap": "392:2418:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;514:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2743:65;;;:::i;:::-;;1041:84:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;545:30:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1605:92:0;;;:::i;:::-;;2436:234:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2676:61;;;:::i;:::-;;973:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;582:32:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1247:163;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1416:584;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2006:105;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2117:313;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1846:189:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;514:25:7;;;;:::o;2743:65::-;1196:12:0;:10;:12::i;:::-;1185:23;;:7;:5;:7::i;:::-;:23;;;1177:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2791:10:7::1;:8;:10::i;:::-;2743:65::o:0;1041:84:1:-;1088:4;1111:7;;;;;;;;;;;1104:14;;1041:84;:::o;545:30:7:-;;;;:::o;1605:92:0:-;1196:12;:10;:12::i;:::-;1185:23;;:7;:5;:7::i;:::-;:23;;;1177:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;2436:234:7:-;1196:12:0;:10;:12::i;:::-;1185:23;;:7;:5;:7::i;:::-;:23;;;1177:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2521:13:7::1;2545:10;2521:35;;2566:5;:18;;;2593:4;2600:7;:5;:7::i;:::-;2609:8;2566:52;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;2633:30;2642:10;2654:8;2633:30;;;;;;;:::i;:::-;;;;;;;;2511:159;2436:234:::0;;:::o;2676:61::-;1196:12:0;:10;:12::i;:::-;1185:23;;:7;:5;:7::i;:::-;:23;;;1177:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2722:8:7::1;:6;:8::i;:::-;2676:61::o:0;973:85:0:-;1019:7;1045:6;;;;;;;;;;;1038:13;;973:85;:::o;582:32:7:-;;;:::o;1247:163::-;1326:4;1332:7;1358:45;1377:6;;1358:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1385:10;;1397:5;1358:18;:45::i;:::-;1351:52;;;;1247:163;;;;;;:::o;1416:584::-;1355:8:1;:6;:8::i;:::-;1354:9;1346:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;1520:12:7::1;1562:10;1574:7;1545:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1535:48;;;;;;1520:63;;1594:10;1606:13:::0;1623:26:::1;1630:12;;1644:4;1623:6;:26::i;:::-;1593:56;;;;1664:5;1659:33;;1678:14;;;;;;;;;;;;;;1659:33;1706:16;1716:5;1706:9;:16::i;:::-;1702:45;;;1731:16;;;;;;;;;;;;;;1702:45;1779:15;;1761;:33;1757:58;;;1803:12;;;;;;;;;;;;;;1757:58;1826:18;1838:5;1826:7;:11;;:18;;;;:::i;:::-;1865:10;1859:26;;;1877:7;1859:26;;;;;;:::i;:::-;;;;;;;;1896:9;:24;;;1921:10;1933;1896:48;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1954:9;:18;;;1973:10;1985:7;1954:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1510:490;;;1416:584:::0;;;:::o;2006:105::-;2062:4;2085:19;2097:6;2085:7;:11;;:19;;;;:::i;:::-;2078:26;;2006:105;;;:::o;2117:313::-;1196:12:0;:10;:12::i;:::-;1185:23;;:7;:5;:7::i;:::-;:23;;;1177:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2183:12:7::1;2205:10;2183:33;;2252:9;2230:32;;:10;:32;;;:70;;;;;2285:15;;2266;:34;;2230:70;2226:98;;;2309:15;;;;;;;;;;;;;;2226:98;2334:5;:14;;;2349:7;:5;:7::i;:::-;2358:5;:15;;;2382:4;2358:30;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2334:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2404:19;2412:10;2404:19;;;;;;:::i;:::-;;;;;;;;2173:257;2117:313:::0;:::o;1846:189:0:-;1196:12;:10;:12::i;:::-;1185:23;;:7;:5;:7::i;:::-;:23;;;1177:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1954:1:::1;1934:22;;:8;:22;;;;1926:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2009:19;2019:8;2009:9;:19::i;:::-;1846:189:::0;:::o;587:96:4:-;640:7;666:10;659:17;;587:96;:::o;2053:117:1:-;1620:8;:6;:8::i;:::-;1612:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2121:5:::1;2111:7:::0;::::1;:15;;;;;;;;;;;;;;;;;;2141:22;2150:12;:10;:12::i;:::-;2141:22;;;;;;:::i;:::-;;;;;;;;2053:117::o:0;2041:169:0:-;2096:16;2115:6;;;;;;;;;;;2096:25;;2140:8;2131:6;;:17;;;;;;;;;;;;;;;;;;2194:8;2163:40;;2184:8;2163:40;;;;;;;;;;;;2086:124;2041:169;:::o;1806:115:1:-;1355:8;:6;:8::i;:::-;1354:9;1346:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;1875:4:::1;1865:7;;:14;;;;;;;;;;;;;;;;;;1894:20;1901:12;:10;:12::i;:::-;1894:20;;;;;;:::i;:::-;;;;;;;;1806:115::o:0;906:906:9:-;1027:4;1033:7;1052:20;1075:4;1052:27;;1089:13;1122:9;1117:567;1141:5;:12;1137:1;:16;1117:567;;;1183:1;1174:10;;;;;:::i;:::-;;;1198:20;1221:5;1227:1;1221:8;;;;;;;;:::i;:::-;;;;;;;;1198:31;;1264:12;1248;:28;1244:430;;1416:12;1430;1399:44;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1389:55;;;;;;1374:70;;1244:430;;;1603:12;1617;1586:44;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1576:55;;;;;;1561:70;;1658:1;1649:10;;;;;:::i;:::-;;;1244:430;1160:524;1155:3;;;;;:::i;:::-;;;;1117:567;;;;1793:4;1777:12;:20;1799:5;1769:36;;;;;;906:906;;;;;;:::o;1076:186:6:-;1146:14;1172:1;1163:5;:10;;1146:27;;1183:12;1212:4;1204:5;:12;1198:1;:19;;1183:34;;1251:4;1227:6;:12;;:20;1240:6;1227:20;;;;;;;;;;;;:28;;;;;;;;;;;1136:126;;1076:186;;:::o;493:217::-;567:4;583:14;609:1;600:5;:10;;583:27;;620:12;649:4;641:5;:12;635:1;:19;;620:34;;702:1;694:4;671:6;:12;;:20;684:6;671:20;;;;;;;;;;;;:27;:32;;664:39;;;;493:217;;;;:::o;7:77:10:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:90::-;476:7;519:5;512:13;505:21;494:32;;442:90;;;:::o;538:109::-;619:21;634:5;619:21;:::i;:::-;614:3;607:34;538:109;;:::o;653:210::-;740:4;778:2;767:9;763:18;755:26;;791:65;853:1;842:9;838:17;829:6;791:65;:::i;:::-;653:210;;;;:::o;869:77::-;906:7;935:5;924:16;;869:77;;;:::o;952:118::-;1039:24;1057:5;1039:24;:::i;:::-;1034:3;1027:37;952:118;;:::o;1076:222::-;1169:4;1207:2;1196:9;1192:18;1184:26;;1220:71;1288:1;1277:9;1273:17;1264:6;1220:71;:::i;:::-;1076:222;;;;:::o;1385:117::-;1494:1;1491;1484:12;1508:117;1617:1;1614;1607:12;1631:126;1668:7;1708:42;1701:5;1697:54;1686:65;;1631:126;;;:::o;1763:96::-;1800:7;1829:24;1847:5;1829:24;:::i;:::-;1818:35;;1763:96;;;:::o;1865:122::-;1938:24;1956:5;1938:24;:::i;:::-;1931:5;1928:35;1918:63;;1977:1;1974;1967:12;1918:63;1865:122;:::o;1993:139::-;2039:5;2077:6;2064:20;2055:29;;2093:33;2120:5;2093:33;:::i;:::-;1993:139;;;;:::o;2138:122::-;2211:24;2229:5;2211:24;:::i;:::-;2204:5;2201:35;2191:63;;2250:1;2247;2240:12;2191:63;2138:122;:::o;2266:139::-;2312:5;2350:6;2337:20;2328:29;;2366:33;2393:5;2366:33;:::i;:::-;2266:139;;;;:::o;2411:474::-;2479:6;2487;2536:2;2524:9;2515:7;2511:23;2507:32;2504:119;;;2542:79;;:::i;:::-;2504:119;2662:1;2687:53;2732:7;2723:6;2712:9;2708:22;2687:53;:::i;:::-;2677:63;;2633:117;2789:2;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2760:118;2411:474;;;;;:::o;2891:118::-;2978:24;2996:5;2978:24;:::i;:::-;2973:3;2966:37;2891:118;;:::o;3015:222::-;3108:4;3146:2;3135:9;3131:18;3123:26;;3159:71;3227:1;3216:9;3212:17;3203:6;3159:71;:::i;:::-;3015:222;;;;:::o;3243:60::-;3271:3;3292:5;3285:12;;3243:60;;;:::o;3309:142::-;3359:9;3392:53;3410:34;3419:24;3437:5;3419:24;:::i;:::-;3410:34;:::i;:::-;3392:53;:::i;:::-;3379:66;;3309:142;;;:::o;3457:126::-;3507:9;3540:37;3571:5;3540:37;:::i;:::-;3527:50;;3457:126;;;:::o;3589:139::-;3652:9;3685:37;3716:5;3685:37;:::i;:::-;3672:50;;3589:139;;;:::o;3734:157::-;3834:50;3878:5;3834:50;:::i;:::-;3829:3;3822:63;3734:157;;:::o;3897:248::-;4003:4;4041:2;4030:9;4026:18;4018:26;;4054:84;4135:1;4124:9;4120:17;4111:6;4054:84;:::i;:::-;3897:248;;;;:::o;4151:117::-;4260:1;4257;4250:12;4274:117;4383:1;4380;4373:12;4397:117;4506:1;4503;4496:12;4537:568;4610:8;4620:6;4670:3;4663:4;4655:6;4651:17;4647:27;4637:122;;4678:79;;:::i;:::-;4637:122;4791:6;4778:20;4768:30;;4821:18;4813:6;4810:30;4807:117;;;4843:79;;:::i;:::-;4807:117;4957:4;4949:6;4945:17;4933:29;;5011:3;5003:4;4995:6;4991:17;4981:8;4977:32;4974:41;4971:128;;;5018:79;;:::i;:::-;4971:128;4537:568;;;;;:::o;5111:122::-;5184:24;5202:5;5184:24;:::i;:::-;5177:5;5174:35;5164:63;;5223:1;5220;5213:12;5164:63;5111:122;:::o;5239:139::-;5285:5;5323:6;5310:20;5301:29;;5339:33;5366:5;5339:33;:::i;:::-;5239:139;;;;:::o;5384:704::-;5479:6;5487;5495;5544:2;5532:9;5523:7;5519:23;5515:32;5512:119;;;5550:79;;:::i;:::-;5512:119;5698:1;5687:9;5683:17;5670:31;5728:18;5720:6;5717:30;5714:117;;;5750:79;;:::i;:::-;5714:117;5863:80;5935:7;5926:6;5915:9;5911:22;5863:80;:::i;:::-;5845:98;;;;5641:312;5992:2;6018:53;6063:7;6054:6;6043:9;6039:22;6018:53;:::i;:::-;6008:63;;5963:118;5384:704;;;;;:::o;6094:320::-;6209:4;6247:2;6236:9;6232:18;6224:26;;6260:65;6322:1;6311:9;6307:17;6298:6;6260:65;:::i;:::-;6335:72;6403:2;6392:9;6388:18;6379:6;6335:72;:::i;:::-;6094:320;;;;;:::o;6420:704::-;6515:6;6523;6531;6580:2;6568:9;6559:7;6555:23;6551:32;6548:119;;;6586:79;;:::i;:::-;6548:119;6706:1;6731:53;6776:7;6767:6;6756:9;6752:22;6731:53;:::i;:::-;6721:63;;6677:117;6861:2;6850:9;6846:18;6833:32;6892:18;6884:6;6881:30;6878:117;;;6914:79;;:::i;:::-;6878:117;7027:80;7099:7;7090:6;7079:9;7075:22;7027:80;:::i;:::-;7009:98;;;;6804:313;6420:704;;;;;:::o;7130:329::-;7189:6;7238:2;7226:9;7217:7;7213:23;7209:32;7206:119;;;7244:79;;:::i;:::-;7206:119;7364:1;7389:53;7434:7;7425:6;7414:9;7410:22;7389:53;:::i;:::-;7379:63;;7335:117;7130:329;;;;:::o;7465:::-;7524:6;7573:2;7561:9;7552:7;7548:23;7544:32;7541:119;;;7579:79;;:::i;:::-;7541:119;7699:1;7724:53;7769:7;7760:6;7749:9;7745:22;7724:53;:::i;:::-;7714:63;;7670:117;7465:329;;;;:::o;7800:169::-;7884:11;7918:6;7913:3;7906:19;7958:4;7953:3;7949:14;7934:29;;7800:169;;;;:::o;7975:182::-;8115:34;8111:1;8103:6;8099:14;8092:58;7975:182;:::o;8163:366::-;8305:3;8326:67;8390:2;8385:3;8326:67;:::i;:::-;8319:74;;8402:93;8491:3;8402:93;:::i;:::-;8520:2;8515:3;8511:12;8504:19;;8163:366;;;:::o;8535:419::-;8701:4;8739:2;8728:9;8724:18;8716:26;;8788:9;8782:4;8778:20;8774:1;8763:9;8759:17;8752:47;8816:131;8942:4;8816:131;:::i;:::-;8808:139;;8535:419;;;:::o;8960:442::-;9109:4;9147:2;9136:9;9132:18;9124:26;;9160:71;9228:1;9217:9;9213:17;9204:6;9160:71;:::i;:::-;9241:72;9309:2;9298:9;9294:18;9285:6;9241:72;:::i;:::-;9323;9391:2;9380:9;9376:18;9367:6;9323:72;:::i;:::-;8960:442;;;;;;:::o;9408:332::-;9529:4;9567:2;9556:9;9552:18;9544:26;;9580:71;9648:1;9637:9;9633:17;9624:6;9580:71;:::i;:::-;9661:72;9729:2;9718:9;9714:18;9705:6;9661:72;:::i;:::-;9408:332;;;;;:::o;9746:166::-;9886:18;9882:1;9874:6;9870:14;9863:42;9746:166;:::o;9918:366::-;10060:3;10081:67;10145:2;10140:3;10081:67;:::i;:::-;10074:74;;10157:93;10246:3;10157:93;:::i;:::-;10275:2;10270:3;10266:12;10259:19;;9918:366;;;:::o;10290:419::-;10456:4;10494:2;10483:9;10479:18;10471:26;;10543:9;10537:4;10533:20;10529:1;10518:9;10514:17;10507:47;10571:131;10697:4;10571:131;:::i;:::-;10563:139;;10290:419;;;:::o;10715:94::-;10748:8;10796:5;10792:2;10788:14;10767:35;;10715:94;;;:::o;10815:::-;10854:7;10883:20;10897:5;10883:20;:::i;:::-;10872:31;;10815:94;;;:::o;10915:100::-;10954:7;10983:26;11003:5;10983:26;:::i;:::-;10972:37;;10915:100;;;:::o;11021:157::-;11126:45;11146:24;11164:5;11146:24;:::i;:::-;11126:45;:::i;:::-;11121:3;11114:58;11021:157;;:::o;11184:79::-;11223:7;11252:5;11241:16;;11184:79;;;:::o;11269:157::-;11374:45;11394:24;11412:5;11394:24;:::i;:::-;11374:45;:::i;:::-;11369:3;11362:58;11269:157;;:::o;11432:397::-;11572:3;11587:75;11658:3;11649:6;11587:75;:::i;:::-;11687:2;11682:3;11678:12;11671:19;;11700:75;11771:3;11762:6;11700:75;:::i;:::-;11800:2;11795:3;11791:12;11784:19;;11820:3;11813:10;;11432:397;;;;;:::o;11835:332::-;11956:4;11994:2;11983:9;11979:18;11971:26;;12007:71;12075:1;12064:9;12060:17;12051:6;12007:71;:::i;:::-;12088:72;12156:2;12145:9;12141:18;12132:6;12088:72;:::i;:::-;11835:332;;;;;:::o;12173:116::-;12243:21;12258:5;12243:21;:::i;:::-;12236:5;12233:32;12223:60;;12279:1;12276;12269:12;12223:60;12173:116;:::o;12295:137::-;12349:5;12380:6;12374:13;12365:22;;12396:30;12420:5;12396:30;:::i;:::-;12295:137;;;;:::o;12438:345::-;12505:6;12554:2;12542:9;12533:7;12529:23;12525:32;12522:119;;;12560:79;;:::i;:::-;12522:119;12680:1;12705:61;12758:7;12749:6;12738:9;12734:22;12705:61;:::i;:::-;12695:71;;12651:125;12438:345;;;;:::o;12789:143::-;12846:5;12877:6;12871:13;12862:22;;12893:33;12920:5;12893:33;:::i;:::-;12789:143;;;;:::o;12938:351::-;13008:6;13057:2;13045:9;13036:7;13032:23;13028:32;13025:119;;;13063:79;;:::i;:::-;13025:119;13183:1;13208:64;13264:7;13255:6;13244:9;13240:22;13208:64;:::i;:::-;13198:74;;13154:128;12938:351;;;;:::o;13295:225::-;13435:34;13431:1;13423:6;13419:14;13412:58;13504:8;13499:2;13491:6;13487:15;13480:33;13295:225;:::o;13526:366::-;13668:3;13689:67;13753:2;13748:3;13689:67;:::i;:::-;13682:74;;13765:93;13854:3;13765:93;:::i;:::-;13883:2;13878:3;13874:12;13867:19;;13526:366;;;:::o;13898:419::-;14064:4;14102:2;14091:9;14087:18;14079:26;;14151:9;14145:4;14141:20;14137:1;14126:9;14122:17;14115:47;14179:131;14305:4;14179:131;:::i;:::-;14171:139;;13898:419;;;:::o;14323:170::-;14463:22;14459:1;14451:6;14447:14;14440:46;14323:170;:::o;14499:366::-;14641:3;14662:67;14726:2;14721:3;14662:67;:::i;:::-;14655:74;;14738:93;14827:3;14738:93;:::i;:::-;14856:2;14851:3;14847:12;14840:19;;14499:366;;;:::o;14871:419::-;15037:4;15075:2;15064:9;15060:18;15052:26;;15124:9;15118:4;15114:20;15110:1;15099:9;15095:17;15088:47;15152:131;15278:4;15152:131;:::i;:::-;15144:139;;14871:419;;;:::o;15296:180::-;15344:77;15341:1;15334:88;15441:4;15438:1;15431:15;15465:4;15462:1;15455:15;15482:348;15522:7;15545:20;15563:1;15545:20;:::i;:::-;15540:25;;15579:20;15597:1;15579:20;:::i;:::-;15574:25;;15767:1;15699:66;15695:74;15692:1;15689:81;15684:1;15677:9;15670:17;15666:105;15663:131;;;15774:18;;:::i;:::-;15663:131;15822:1;15819;15815:9;15804:20;;15482:348;;;;:::o;15836:180::-;15884:77;15881:1;15874:88;15981:4;15978:1;15971:15;16005:4;16002:1;15995:15;16022:79;16061:7;16090:5;16079:16;;16022:79;;;:::o;16107:157::-;16212:45;16232:24;16250:5;16232:24;:::i;:::-;16212:45;:::i;:::-;16207:3;16200:58;16107:157;;:::o;16270:397::-;16410:3;16425:75;16496:3;16487:6;16425:75;:::i;:::-;16525:2;16520:3;16516:12;16509:19;;16538:75;16609:3;16600:6;16538:75;:::i;:::-;16638:2;16633:3;16629:12;16622:19;;16658:3;16651:10;;16270:397;;;;;:::o;16673:305::-;16713:3;16732:20;16750:1;16732:20;:::i;:::-;16727:25;;16766:20;16784:1;16766:20;:::i;:::-;16761:25;;16920:1;16852:66;16848:74;16845:1;16842:81;16839:107;;;16926:18;;:::i;:::-;16839:107;16970:1;16967;16963:9;16956:16;;16673:305;;;;:::o;16984:233::-;17023:3;17046:24;17064:5;17046:24;:::i;:::-;17037:33;;17092:66;17085:5;17082:77;17079:103;;;17162:18;;:::i;:::-;17079:103;17209:1;17202:5;17198:13;17191:20;;16984:233;;;:::o",
        "sourceCodeRaw": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ICODE.sol\";\nimport \"./MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\n\ncontract ClaimCODE is Ownable, Pausable {\n    using BitMaps for BitMaps.BitMap;\n\n    BitMaps.BitMap private claimed;\n\n    bytes32 public merkleRoot;\n    uint256 public claimPeriodEnds;\n\n    ICODE public immutable codeToken;\n\n    event Claim(address indexed _claimant, uint256 _amount);\n    event Sweep20(address _token);\n    event Sweep721(address _token, uint256 _tokenID);\n\n    error Address0Error();\n    error InvalidProof();\n    error AlreadyClaimed();\n    error ClaimEnded();\n    error ClaimNotEnded();\n    error InitError();\n\n    constructor(\n        uint256 _claimPeriodEnds,\n        address _codeToken,\n        bytes32 _merkleRoot\n    ) {\n        if (_codeToken == address(0)) revert Address0Error();\n        claimPeriodEnds = _claimPeriodEnds;\n        codeToken = ICODE(_codeToken);\n        merkleRoot = _merkleRoot;\n        _pause();\n    }\n\n    function verify(bytes32[] calldata _proof, bytes32 _leaf) public view returns (bool, uint256) {\n        return MerkleProof.verify(_proof, merkleRoot, _leaf);\n    }\n\n    function claimTokens(uint256 _amount, bytes32[] calldata _merkleProof) external whenNotPaused {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _amount));\n        (bool valid, uint256 index) = verify(_merkleProof, leaf);\n        if (!valid) revert InvalidProof();\n        if (isClaimed(index)) revert AlreadyClaimed();\n        if (block.timestamp > claimPeriodEnds) revert ClaimEnded();\n\n        claimed.set(index);\n        emit Claim(msg.sender, _amount);\n\n        codeToken.claim_delegate(msg.sender, msg.sender);\n        codeToken.transfer(msg.sender, _amount);\n    }\n\n    function isClaimed(uint256 _index) public view returns (bool) {\n        return claimed.get(_index);\n    }\n\n    function sweep20(address _tokenAddr) external onlyOwner {\n        IERC20 token = IERC20(_tokenAddr);\n        if (_tokenAddr == address(codeToken) && block.timestamp <= claimPeriodEnds) revert ClaimNotEnded();\n        token.transfer(owner(), token.balanceOf(address(this)));\n        emit Sweep20(_tokenAddr);\n    }\n\n    function sweep721(address _tokenAddr, uint256 _tokenID) external onlyOwner {\n        IERC721 token = IERC721(_tokenAddr);\n        token.transferFrom(address(this), owner(), _tokenID);\n        emit Sweep721(_tokenAddr, _tokenID);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n",
        "sourceCodeParsed": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ICODE.sol\";\nimport \"./MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\n\ncontract ClaimCODE is Ownable, Pausable {\n    using BitMaps for BitMaps.BitMap;\n\n    BitMaps.BitMap private claimed;\n\n    bytes32 public merkleRoot;\n    uint256 public claimPeriodEnds;\n\n    ICODE public immutable codeToken;\n\n    event Claim(address indexed _claimant, uint256 _amount);\n    event Sweep20(address _token);\n    event Sweep721(address _token, uint256 _tokenID);\n\n    error Address0Error();\n    error InvalidProof();\n    error AlreadyClaimed();\n    error ClaimEnded();\n    error ClaimNotEnded();\n    error InitError();\n\n    constructor(\n        uint256 _claimPeriodEnds,\n        address _codeToken,\n        bytes32 _merkleRoot\n    ) {\n        if (_codeToken == address(0)) revert Address0Error();\n        claimPeriodEnds = _claimPeriodEnds;\n        codeToken = ICODE(_codeToken);\n        merkleRoot = _merkleRoot;\n        _pause();\n    }\n\n    function verify(bytes32[] calldata _proof, bytes32 _leaf) public view returns (bool, uint256) {\n        return MerkleProof.verify(_proof, merkleRoot, _leaf);\n    }\n\n    function claimTokens(uint256 _amount, bytes32[] calldata _merkleProof) external whenNotPaused {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _amount));\n        (bool valid, uint256 index) = verify(_merkleProof, leaf);\n        if (!valid) revert InvalidProof();\n        if (isClaimed(index)) revert AlreadyClaimed();\n        if (block.timestamp > claimPeriodEnds) revert ClaimEnded();\n\n        claimed.set(index);\n        emit Claim(msg.sender, _amount);\n\n        codeToken.claim_delegate(msg.sender, msg.sender);\n        codeToken.transfer(msg.sender, _amount);\n    }\n\n    function isClaimed(uint256 _index) public view returns (bool) {\n        return claimed.get(_index);\n    }\n\n    function sweep20(address _tokenAddr) external onlyOwner {\n        IERC20 token = IERC20(_tokenAddr);\n        if (_tokenAddr == address(codeToken) && block.timestamp <= claimPeriodEnds) revert ClaimNotEnded();\n        token.transfer(owner(), token.balanceOf(address(this)));\n        emit Sweep20(_tokenAddr);\n    }\n\n    function sweep721(address _tokenAddr, uint256 _tokenID) external onlyOwner {\n        IERC721 token = IERC721(_tokenAddr);\n        token.transferFrom(address(this), owner(), _tokenID);\n        emit Sweep721(_tokenAddr, _tokenID);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x9A114CB2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9A114CB2 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x9E34070F EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xD85F9A8B EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x258 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x904D2022 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x972A2A62 EQ PUSH2 0x1BF JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x66DEAC47 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x66DEAC47 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x76CC4854 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x179 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x117 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x274 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xFE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x115 PUSH2 0x27A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11F PUSH2 0x300 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x101F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH2 0x316 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x31C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x1102 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x181 PUSH2 0x4D9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x55F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH2 0x588 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x1277 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP3 SWAP2 SWAP1 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x205 SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST PUSH2 0x609 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x226 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x1360 JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP2 SWAP1 PUSH2 0x101F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x905 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x272 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x138D JUMP JUMPDEST PUSH2 0xB72 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x282 PUSH2 0xC6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2A0 PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2ED SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2FE PUSH2 0xC72 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x324 PUSH2 0xC6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x342 PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x398 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38F SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3A2 PUSH1 0x0 PUSH2 0xD13 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3AC PUSH2 0xC6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3CA PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x420 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x417 SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS PUSH2 0x44A PUSH2 0x55F JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x469 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x497 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x82B0210374125CDD64DFCFEA448D1E398CD4EBBD12B15EDD564EFE6F2750CE27 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4CC SWAP3 SWAP2 SWAP1 PUSH2 0x146E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x4E1 PUSH2 0xC6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4FF PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x555 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54C SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x55D PUSH2 0xDD7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5FD DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH1 0x2 SLOAD DUP6 PUSH2 0xE7A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x611 PUSH2 0x300 JUMP JUMPDEST ISZERO PUSH2 0x651 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x648 SWAP1 PUSH2 0x14E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x666 SWAP3 SWAP2 SWAP1 PUSH2 0x156C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x68C DUP6 DUP6 DUP6 PUSH2 0x5AC JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x6C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BDE33900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6D0 DUP2 PUSH2 0x8E8 JUMP JUMPDEST ISZERO PUSH2 0x707 JUMPI PUSH1 0x40 MLOAD PUSH32 0x646CF55800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD TIMESTAMP GT ISZERO PUSH2 0x743 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4F184B7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x757 DUP2 PUSH1 0x1 PUSH2 0xF56 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 DUP8 PUSH1 0x40 MLOAD PUSH2 0x79D SWAP2 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD371DDD5 CALLER CALLER PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x800 SWAP3 SWAP2 SWAP1 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x88D SWAP3 SWAP2 SWAP1 PUSH2 0x146E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8DF SWAP2 SWAP1 PUSH2 0x15ED JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE DUP3 PUSH1 0x1 PUSH2 0xF94 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x90D PUSH2 0xC6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x92B PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x981 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x978 SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x9E3 JUMPI POP PUSH1 0x3 SLOAD TIMESTAMP GT ISZERO JUMPDEST ISZERO PUSH2 0xA1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x72C38D2900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH2 0xA3E PUSH2 0x55F JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA77 SWAP2 SWAP1 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAC7 SWAP2 SWAP1 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP3 SWAP2 SWAP1 PUSH2 0x146E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB36 SWAP2 SWAP1 PUSH2 0x15ED JUMP JUMPDEST POP PUSH32 0x510A40BEF53EBAD78064FC0E32D3CEFACE15A9E2D325D8FA92D3430FA976B01B DUP3 PUSH1 0x40 MLOAD PUSH2 0xB66 SWAP2 SWAP1 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0xB7A PUSH2 0xC6A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB98 PUSH2 0x55F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE5 SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC55 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC67 DUP2 PUSH2 0xD13 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC7A PUSH2 0x300 JUMP JUMPDEST PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB0 SWAP1 PUSH2 0x173A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xCFC PUSH2 0xC6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD09 SWAP2 SWAP1 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xDDF PUSH2 0x300 JUMP JUMPDEST ISZERO PUSH2 0xE1F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE16 SWAP1 PUSH2 0x14E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xE63 PUSH2 0xC6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE70 SWAP2 SWAP1 PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0xF43 JUMPI PUSH1 0x2 DUP3 PUSH2 0xE9C SWAP2 SWAP1 PUSH2 0x1789 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xEB3 JUMPI PUSH2 0xEB2 PUSH2 0x17E3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 GT PUSH2 0xEF4 JUMPI DUP4 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xED7 SWAP3 SWAP2 SWAP1 PUSH2 0x1833 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP4 POP PUSH2 0xF2F JUMP JUMPDEST DUP1 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF07 SWAP3 SWAP2 SWAP1 PUSH2 0x1833 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP4 POP PUSH1 0x1 DUP4 PUSH2 0xF2C SWAP2 SWAP1 PUSH2 0x185F JUMP JUMPDEST SWAP3 POP JUMPDEST POP DUP1 DUP1 PUSH2 0xF3B SWAP1 PUSH2 0x18B5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE86 JUMP JUMPDEST POP DUP6 DUP3 EQ DUP2 SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP4 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD OR SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 DUP4 SWAP1 SHR SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP5 AND PUSH1 0x1 SWAP1 SHL SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD AND EQ ISZERO SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFE3 DUP2 PUSH2 0xFD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFFE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFDA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1019 DUP2 PUSH2 0x1004 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1034 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1010 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x104D DUP2 PUSH2 0x103A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1068 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1044 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A3 DUP3 PUSH2 0x1078 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10B3 DUP2 PUSH2 0x1098 JUMP JUMPDEST DUP2 EQ PUSH2 0x10BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10D0 DUP2 PUSH2 0x10AA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10DF DUP2 PUSH2 0x103A JUMP JUMPDEST DUP2 EQ PUSH2 0x10EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x10FC DUP2 PUSH2 0x10D6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1119 JUMPI PUSH2 0x1118 PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1127 DUP6 DUP3 DUP7 ADD PUSH2 0x10C1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1138 DUP6 DUP3 DUP7 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x114B DUP2 PUSH2 0x1098 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1166 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1142 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1191 PUSH2 0x118C PUSH2 0x1187 DUP5 PUSH2 0x1078 JUMP JUMPDEST PUSH2 0x116C JUMP JUMPDEST PUSH2 0x1078 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A3 DUP3 PUSH2 0x1176 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B5 DUP3 PUSH2 0x1198 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11C5 DUP2 PUSH2 0x11AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x120B JUMPI PUSH2 0x120A PUSH2 0x11E6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1228 JUMPI PUSH2 0x1227 PUSH2 0x11EB JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x1244 JUMPI PUSH2 0x1243 PUSH2 0x11F0 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1254 DUP2 PUSH2 0xFD0 JUMP JUMPDEST DUP2 EQ PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1271 DUP2 PUSH2 0x124B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1290 JUMPI PUSH2 0x128F PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH2 0x12AD PUSH2 0x1073 JUMP JUMPDEST JUMPDEST PUSH2 0x12BA DUP7 DUP3 DUP8 ADD PUSH2 0x11F5 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x20 PUSH2 0x12CD DUP7 DUP3 DUP8 ADD PUSH2 0x1262 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12EC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1010 JUMP JUMPDEST PUSH2 0x12F9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1044 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1319 JUMPI PUSH2 0x1318 PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP7 DUP3 DUP8 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1348 JUMPI PUSH2 0x1347 PUSH2 0x1073 JUMP JUMPDEST JUMPDEST PUSH2 0x1354 DUP7 DUP3 DUP8 ADD PUSH2 0x11F5 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1376 JUMPI PUSH2 0x1375 PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1384 DUP5 DUP3 DUP6 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x13B1 DUP5 DUP3 DUP6 ADD PUSH2 0x10C1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1401 PUSH1 0x20 DUP4 PUSH2 0x13BA JUMP JUMPDEST SWAP2 POP PUSH2 0x140C DUP3 PUSH2 0x13CB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1430 DUP2 PUSH2 0x13F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x144C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x1459 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x1466 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1044 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1483 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x1490 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1044 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14CD PUSH1 0x10 DUP4 PUSH2 0x13BA JUMP JUMPDEST SWAP2 POP PUSH2 0x14D8 DUP3 PUSH2 0x1497 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14FC DUP2 PUSH2 0x14C0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151B DUP3 PUSH2 0x1503 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x152D DUP3 PUSH2 0x1510 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1545 PUSH2 0x1540 DUP3 PUSH2 0x1098 JUMP JUMPDEST PUSH2 0x1522 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1566 PUSH2 0x1561 DUP3 PUSH2 0x103A JUMP JUMPDEST PUSH2 0x154B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1578 DUP3 DUP6 PUSH2 0x1534 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x1588 DUP3 DUP5 PUSH2 0x1555 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x15AD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1142 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x15CA DUP2 PUSH2 0x1004 JUMP JUMPDEST DUP2 EQ PUSH2 0x15D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x15E7 DUP2 PUSH2 0x15C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1603 JUMPI PUSH2 0x1602 PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1611 DUP5 DUP3 DUP6 ADD PUSH2 0x15D8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1629 DUP2 PUSH2 0x10D6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1645 JUMPI PUSH2 0x1644 PUSH2 0x106E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1653 DUP5 DUP3 DUP6 ADD PUSH2 0x161A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16B8 PUSH1 0x26 DUP4 PUSH2 0x13BA JUMP JUMPDEST SWAP2 POP PUSH2 0x16C3 DUP3 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16E7 DUP2 PUSH2 0x16AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1724 PUSH1 0x14 DUP4 PUSH2 0x13BA JUMP JUMPDEST SWAP2 POP PUSH2 0x172F DUP3 PUSH2 0x16EE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1753 DUP2 PUSH2 0x1717 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1794 DUP3 PUSH2 0x103A JUMP JUMPDEST SWAP2 POP PUSH2 0x179F DUP4 PUSH2 0x103A JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x17D8 JUMPI PUSH2 0x17D7 PUSH2 0x175A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x182D PUSH2 0x1828 DUP3 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x1812 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x183F DUP3 DUP6 PUSH2 0x181C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x184F DUP3 DUP5 PUSH2 0x181C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x186A DUP3 PUSH2 0x103A JUMP JUMPDEST SWAP2 POP PUSH2 0x1875 DUP4 PUSH2 0x103A JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x18AA JUMPI PUSH2 0x18A9 PUSH2 0x175A JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C0 DUP3 PUSH2 0x103A JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x18F3 JUMPI PUSH2 0x18F2 PUSH2 0x175A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE PUSH21 0xE3BB2A238D2FA4F7FAB7D2D02161C3A3C3C6CDF8C0 0xBB 0xCA 0x23 0xEA KECCAK256 0xE7 0xB8 MULMOD 0xB4 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
        "bytecode": ""
      }
    },
    "combinedRawSourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/BitMaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ClaimCODE.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICODE.sol\\\";\\nimport \\\"./MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\ncontract ClaimCODE is Ownable, Pausable {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap private claimed;\\n\\n    bytes32 public merkleRoot;\\n    uint256 public claimPeriodEnds;\\n\\n    ICODE public immutable codeToken;\\n\\n    event Claim(address indexed _claimant, uint256 _amount);\\n    event Sweep20(address _token);\\n    event Sweep721(address _token, uint256 _tokenID);\\n\\n    error Address0Error();\\n    error InvalidProof();\\n    error AlreadyClaimed();\\n    error ClaimEnded();\\n    error ClaimNotEnded();\\n    error InitError();\\n\\n    constructor(\\n        uint256 _claimPeriodEnds,\\n        address _codeToken,\\n        bytes32 _merkleRoot\\n    ) {\\n        if (_codeToken == address(0)) revert Address0Error();\\n        claimPeriodEnds = _claimPeriodEnds;\\n        codeToken = ICODE(_codeToken);\\n        merkleRoot = _merkleRoot;\\n        _pause();\\n    }\\n\\n    function verify(bytes32[] calldata _proof, bytes32 _leaf) public view returns (bool, uint256) {\\n        return MerkleProof.verify(_proof, merkleRoot, _leaf);\\n    }\\n\\n    function claimTokens(uint256 _amount, bytes32[] calldata _merkleProof) external whenNotPaused {\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _amount));\\n        (bool valid, uint256 index) = verify(_merkleProof, leaf);\\n        if (!valid) revert InvalidProof();\\n        if (isClaimed(index)) revert AlreadyClaimed();\\n        if (block.timestamp > claimPeriodEnds) revert ClaimEnded();\\n\\n        claimed.set(index);\\n        emit Claim(msg.sender, _amount);\\n\\n        codeToken.claim_delegate(msg.sender, msg.sender);\\n        codeToken.transfer(msg.sender, _amount);\\n    }\\n\\n    function isClaimed(uint256 _index) public view returns (bool) {\\n        return claimed.get(_index);\\n    }\\n\\n    function sweep20(address _tokenAddr) external onlyOwner {\\n        IERC20 token = IERC20(_tokenAddr);\\n        if (_tokenAddr == address(codeToken) && block.timestamp <= claimPeriodEnds) revert ClaimNotEnded();\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n        emit Sweep20(_tokenAddr);\\n    }\\n\\n    function sweep721(address _tokenAddr, uint256 _tokenID) external onlyOwner {\\n        IERC721 token = IERC721(_tokenAddr);\\n        token.transferFrom(address(this), owner(), _tokenID);\\n        emit Sweep721(_tokenAddr, _tokenID);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ICODE.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICODE is IERC20 {\\n    function claim_delegate(address _delegator, address _delegatee) external;\\n}\\n\"\r\n    },\r\n    \"src/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/cryptography/MerkleProof.sol\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool, uint256) {\\n        bytes32 computedHash = leaf;\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            index *= 2;\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n                index += 1;\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return (computedHash == root, index);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}",
    "address": "0xbd82Cd2f7C2B8710A879580399CFbfF61c5020B9"
  }
}