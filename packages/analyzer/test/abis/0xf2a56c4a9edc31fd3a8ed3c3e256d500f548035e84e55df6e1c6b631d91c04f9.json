{
  "sourceCodes": {
    "0xE7d3982E214F9DFD53d23a7f72851a7044072250": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/manifold/lazyclaim/ERC1155LazyPayableClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable reason-string\\npragma solidity ^0.8.0;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/IERC1155CreatorCore.sol\\\";\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"./LazyPayableClaim.sol\\\";\\nimport \\\"./IERC1155LazyPayableClaim.sol\\\";\\n\\n/**\\n * @title Lazy Payable Claim\\n * @author manifold.xyz\\n * @notice Lazy claim with optional whitelist ERC1155 tokens\\n */\\ncontract ERC1155LazyPayableClaim is IERC165, IERC1155LazyPayableClaim, ICreatorExtensionTokenURI, LazyPayableClaim {\\n    using Strings for uint256;\\n\\n    // stores mapping from tokenId to the claim it represents\\n    // { contractAddress => { tokenId => Claim } }\\n    mapping(address => mapping(uint256 => Claim)) private _claims;\\n\\n    // { contractAddress => { tokenId => { claimIndex } }\\n    mapping(address => mapping(uint256 => uint256)) private _claimTokenIds;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AdminControl) returns (bool) {\\n        return interfaceId == type(IERC1155LazyPayableClaim).interfaceId ||\\n            interfaceId == type(ILazyPayableClaim).interfaceId ||\\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\\n            interfaceId == type(IAdminControl).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    constructor(address delegationRegistry) LazyPayableClaim(delegationRegistry) {}\\n\\n    /**\\n     * See {IERC1155LazyClaim-initializeClaim}.\\n     */\\n    function initializeClaim(\\n        address creatorContractAddress,\\n        uint256 claimIndex,\\n        ClaimParameters calldata claimParameters\\n    ) external override creatorAdminRequired(creatorContractAddress) {\\n        // Revert if claim at claimIndex already exists\\n        require(_claims[creatorContractAddress][claimIndex].storageProtocol == StorageProtocol.INVALID, \\\"Claim already initialized\\\");\\n\\n        // Sanity checks\\n        require(claimParameters.storageProtocol != StorageProtocol.INVALID, \\\"Cannot initialize with invalid storage protocol\\\");\\n        require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \\\"Cannot have startDate greater than or equal to endDate\\\");\\n        require(claimParameters.merkleRoot == \\\"\\\" || claimParameters.walletMax == 0, \\\"Cannot provide both walletMax and merkleRoot\\\");\\n\\n        address[] memory receivers = new address[](1);\\n        receivers[0] = msg.sender;\\n        string[] memory uris = new string[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n        uint256[] memory newTokenIds = IERC1155CreatorCore(creatorContractAddress).mintExtensionNew(receivers, amounts, uris);\\n\\n         // Create the claim\\n        _claims[creatorContractAddress][claimIndex] = Claim({\\n            total: 0,\\n            totalMax: claimParameters.totalMax,\\n            walletMax: claimParameters.walletMax,\\n            startDate: claimParameters.startDate,\\n            endDate: claimParameters.endDate,\\n            storageProtocol: claimParameters.storageProtocol,\\n            merkleRoot: claimParameters.merkleRoot,\\n            location: claimParameters.location,\\n            tokenId: newTokenIds[0],\\n            cost: claimParameters.cost,\\n            paymentReceiver: claimParameters.paymentReceiver,\\n            erc20: claimParameters.erc20\\n        });\\n        _claimTokenIds[creatorContractAddress][newTokenIds[0]] = claimIndex;\\n        \\n        emit ClaimInitialized(creatorContractAddress, claimIndex, msg.sender);\\n    }\\n\\n    /**\\n     * See {IERC1155LazyClaim-updateClaim}.\\n     */\\n    function updateClaim(\\n        address creatorContractAddress,\\n        uint256 claimIndex,\\n        ClaimParameters memory claimParameters\\n    ) external override creatorAdminRequired(creatorContractAddress) {\\n        Claim memory claim = _claims[creatorContractAddress][claimIndex];\\n        require(claim.storageProtocol != StorageProtocol.INVALID, \\\"Claim not initialized\\\");\\n        require(claimParameters.storageProtocol != StorageProtocol.INVALID, \\\"Cannot set invalid storage protocol\\\");\\n        require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \\\"Cannot have startDate greater than or equal to endDate\\\");\\n        require(claimParameters.erc20 == claim.erc20, \\\"Cannot change payment token\\\");\\n        if (claimParameters.totalMax != 0 && claim.total > claimParameters.totalMax) {\\n            claimParameters.totalMax = claim.total;\\n        }\\n\\n        // Overwrite the existing claim\\n        _claims[creatorContractAddress][claimIndex] = Claim({\\n            total: claim.total,\\n            totalMax: claimParameters.totalMax,\\n            walletMax: claimParameters.walletMax,\\n            startDate: claimParameters.startDate,\\n            endDate: claimParameters.endDate,\\n            storageProtocol: claimParameters.storageProtocol,\\n            merkleRoot: claimParameters.merkleRoot,\\n            location: claimParameters.location,\\n            tokenId: claim.tokenId,\\n            cost: claimParameters.cost,\\n            paymentReceiver: claimParameters.paymentReceiver,\\n            erc20: claimParameters.erc20\\n        });\\n        emit ClaimUpdated(creatorContractAddress, claimIndex);\\n    }\\n\\n    /**\\n     * See {IERC1155LazyClaim-updateTokenURIParams}.\\n     */\\n    function updateTokenURIParams(\\n        address creatorContractAddress, uint256 claimIndex,\\n        StorageProtocol storageProtocol,\\n        string calldata location\\n    ) external override creatorAdminRequired(creatorContractAddress)  {\\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\\n        require(claim.storageProtocol != StorageProtocol.INVALID, \\\"Claim not initialized\\\");\\n        require(storageProtocol != StorageProtocol.INVALID, \\\"Cannot set invalid storage protocol\\\");\\n\\n        claim.storageProtocol = storageProtocol;\\n        claim.location = location;\\n        emit ClaimUpdated(creatorContractAddress, claimIndex);\\n    }\\n\\n    /**\\n     * See {IERC1155LazyClaim-getClaim}.\\n     */\\n    function getClaim(address creatorContractAddress, uint256 claimIndex) public override view returns(Claim memory claim) {\\n        return _getClaim(creatorContractAddress, claimIndex);\\n    }\\n\\n    function _getClaim(address creatorContractAddress, uint256 claimIndex) private view returns(Claim storage claim) {\\n        claim = _claims[creatorContractAddress][claimIndex];\\n        require(claim.storageProtocol != StorageProtocol.INVALID, \\\"Claim not initialized\\\");\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-checkMintIndex}.\\n     */\\n    function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) external override view returns(bool) {\\n        Claim memory claim = getClaim(creatorContractAddress, claimIndex);\\n        return _checkMintIndex(creatorContractAddress, claimIndex, claim.merkleRoot, mintIndex);\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-checkMintIndices}.\\n     */\\n    function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external override view returns(bool[] memory minted) {\\n        Claim memory claim = getClaim(creatorContractAddress, claimIndex);\\n        uint256 mintIndicesLength = mintIndices.length;\\n        minted = new bool[](mintIndices.length);\\n        for (uint256 i; i < mintIndicesLength;) {\\n            minted[i] = _checkMintIndex(creatorContractAddress, claimIndex, claim.merkleRoot, mintIndices[i]);\\n            unchecked{ ++i; }\\n        }\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-getTotalMints}.\\n     */\\n    function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {\\n        Claim memory claim = getClaim(creatorContractAddress, claimIndex);\\n        return _getTotalMints(claim.walletMax, minter, creatorContractAddress, claimIndex);\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-mint}.\\n     */\\n    function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof, address mintFor) external payable override {\\n        Claim storage claim = _getClaim(creatorContractAddress, claimIndex);\\n\\n        // Check totalMax\\n        require(++claim.total <= claim.totalMax || claim.totalMax == 0, \\\"Maximum tokens already minted for this claim\\\");\\n\\n        // Validate mint\\n        _validateMint(creatorContractAddress, claimIndex, claim.startDate, claim.endDate, claim.walletMax, claim.merkleRoot, mintIndex, merkleProof, mintFor);\\n\\n        // Transfer funds\\n        _transferFunds(claim.erc20, claim.cost, claim.paymentReceiver, 1, claim.merkleRoot != \\\"\\\");\\n\\n        // Do mint\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = msg.sender;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = 1;\\n        _mintClaim(creatorContractAddress, claim, recipients, amounts);\\n\\n        emit ClaimMint(creatorContractAddress, claimIndex);\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-mintBatch}.\\n     */\\n    function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable override {\\n        Claim storage claim = _getClaim(creatorContractAddress, claimIndex);\\n\\n        // Check totalMax\\n        claim.total += mintCount;\\n        require(claim.totalMax == 0 || claim.total <= claim.totalMax, \\\"Too many requested for this claim\\\");\\n\\n        // Validate mint\\n        _validateMint(creatorContractAddress, claimIndex, claim.startDate, claim.endDate, claim.walletMax, claim.merkleRoot, mintCount, mintIndices, merkleProofs, mintFor);\\n\\n        // Transfer funds\\n        _transferFunds(claim.erc20, claim.cost, claim.paymentReceiver, mintCount, claim.merkleRoot != \\\"\\\");\\n\\n        // Do mint\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = msg.sender;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = mintCount;\\n        _mintClaim(creatorContractAddress, claim, recipients, amounts);\\n\\n        emit ClaimMintBatch(creatorContractAddress, claimIndex, mintCount);\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-mintProxy}.\\n     */\\n    function mintProxy(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable override {\\n        Claim storage claim = _getClaim(creatorContractAddress, claimIndex);\\n\\n        // Check totalMax\\n        claim.total += mintCount;\\n        require(claim.totalMax == 0 || claim.total <= claim.totalMax, \\\"Too many requested for this claim\\\");\\n\\n        // Validate mint\\n        _validateMintProxy(creatorContractAddress, claimIndex, claim.startDate, claim.endDate, claim.walletMax, claim.merkleRoot, mintCount, mintIndices, merkleProofs, mintFor);\\n\\n        // Transfer funds\\n        _transferFundsProxy(claim.erc20, claim.cost, claim.paymentReceiver, mintCount, claim.merkleRoot != \\\"\\\");\\n\\n        // Do mint\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = mintFor;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = mintCount;\\n        _mintClaim(creatorContractAddress, claim, recipients, amounts);\\n\\n        emit ClaimMintProxy(creatorContractAddress, claimIndex, mintCount, msg.sender, mintFor);\\n    }\\n\\n    /**\\n     * See {IERC1155LazyPayableClaim-airdrop}.\\n     */\\n    function airdrop(address creatorContractAddress, uint256 claimIndex, address[] calldata recipients,\\n        uint256[] calldata amounts) external override creatorAdminRequired(creatorContractAddress) {\\n        require(recipients.length == amounts.length, \\\"Unequal number of recipients and amounts provided\\\");\\n\\n        // Fetch the claim\\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\\n\\n        uint256 totalAmount;\\n        for (uint256 i; i < amounts.length;) {\\n            totalAmount += amounts[i];\\n            unchecked{ ++i; }\\n        }\\n        require(totalAmount <= MAX_UINT_32, \\\"Too many requested\\\");\\n        claim.total += uint32(totalAmount);\\n        if (claim.totalMax != 0 && claim.total > claim.totalMax) {\\n            claim.totalMax = claim.total;\\n        }\\n\\n        // Airdrop the tokens\\n        _mintClaim(creatorContractAddress, claim, recipients, amounts);\\n    }\\n\\n    /**\\n     * Mint a claim\\n     */\\n    function _mintClaim(address creatorContractAddress, Claim storage claim, address[] memory recipients, uint256[] memory amounts) private {\\n        uint256[] memory tokenIds = new uint256[](1);\\n        tokenIds[0] = claim.tokenId;\\n        IERC1155CreatorCore(creatorContractAddress).mintExtensionExisting(recipients, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * See {ICreatorExtensionTokenURI-tokenURI}.\\n     */\\n    function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {\\n        uint224 tokenClaim = uint224(_claimTokenIds[creatorContractAddress][tokenId]);\\n        require(tokenClaim > 0, \\\"Token does not exist\\\");\\n        Claim memory claim = _claims[creatorContractAddress][tokenClaim];\\n\\n        string memory prefix = \\\"\\\";\\n        if (claim.storageProtocol == StorageProtocol.ARWEAVE) {\\n            prefix = ARWEAVE_PREFIX;\\n        } else if (claim.storageProtocol == StorageProtocol.IPFS) {\\n            prefix = IPFS_PREFIX;\\n        }\\n        uri = string(abi.encodePacked(prefix, claim.location));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/lazyclaim/IERC1155LazyPayableClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./IERC721LazyPayableClaim.sol\\\";\\n\\n/**\\n * Lazy Claim interface\\n */\\ninterface IERC1155LazyPayableClaim is ILazyPayableClaim {\\n\\n    struct ClaimParameters {\\n        uint32 totalMax;\\n        uint32 walletMax;\\n        uint48 startDate;\\n        uint48 endDate;\\n        StorageProtocol storageProtocol;\\n        bytes32 merkleRoot;\\n        string location;\\n        uint256 cost;\\n        address payable paymentReceiver;\\n        address erc20;\\n    }\\n\\n    struct Claim {\\n        uint32 total;\\n        uint32 totalMax;\\n        uint32 walletMax;\\n        uint48 startDate;\\n        uint48 endDate;\\n        StorageProtocol storageProtocol;\\n        bytes32 merkleRoot;\\n        string location;\\n        uint256 tokenId;\\n        uint256 cost;\\n        address payable paymentReceiver;\\n        address erc20;\\n    }\\n\\n    /**\\n     * @notice initialize a new claim, emit initialize event, and return the newly created index\\n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\\n     */\\n    function initializeClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\\n\\n    /**\\n     * @notice update an existing claim at claimIndex\\n     * @param creatorContractAddress    the creator contract corresponding to the claim\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\\n     */\\n    function updateClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\\n\\n    /**\\n     * @notice update tokenURI parameters for an existing claim at claimIndex\\n     * @param creatorContractAddress    the creator contract corresponding to the claim\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param storageProtocol           the new storage protocol\\n     * @param location                  the new location\\n     */\\n    function updateTokenURIParams(address creatorContractAddress, uint256 claimIndex, StorageProtocol storageProtocol, string calldata location) external;\\n\\n    /**\\n     * @notice get a claim corresponding to a creator contract and index\\n     * @param creatorContractAddress    the address of the creator contract\\n     * @param claimIndex                the index of the claim\\n     * @return                          the claim object\\n     */\\n    function getClaim(address creatorContractAddress, uint256 claimIndex) external view returns(Claim memory);\\n\\n    /**\\n     * @notice allow admin to airdrop arbitrary tokens \\n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param recipients                addresses to airdrop to\\n     * @param amounts                   number of tokens to airdrop to each address in addresses\\n     */\\n    function airdrop(address creatorContractAddress, uint256 claimIndex, address[] calldata recipients, uint256[] calldata amounts) external;\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/lazyclaim/LazyPayableClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable reason-string\\npragma solidity ^0.8.0;\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/delegation-registry/IDelegationRegistry.sol\\\";\\nimport \\\"../../libraries/manifold-membership/IManifoldMembership.sol\\\";\\n\\nimport \\\"./ILazyPayableClaim.sol\\\";\\n\\n/**\\n * @title Lazy Payable Claim\\n * @author manifold.xyz\\n * @notice Lazy payable claim with optional whitelist ERC721 tokens\\n */\\nabstract contract LazyPayableClaim is ILazyPayableClaim, AdminControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string internal constant ARWEAVE_PREFIX = \\\"https://arweave.net/\\\";\\n    string internal constant IPFS_PREFIX = \\\"ipfs://\\\";\\n\\n    uint256 internal constant MINT_INDEX_BITMASK = 0xFF;\\n    // solhint-disable-next-line\\n    address public immutable DELEGATION_REGISTRY;\\n\\n    uint256 public constant MINT_FEE = 500000000000000;\\n    uint256 public constant MINT_FEE_MERKLE = 690000000000000;\\n    address public MEMBERSHIP_ADDRESS;\\n\\n    uint256 internal constant MAX_UINT_32 = 0xffffffff;\\n    uint256 internal constant MAX_UINT_256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    address private constant ADDRESS_ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    // ONLY USED FOR NON-MERKLE MINTS: stores the number of tokens minted per wallet per claim, in order to limit maximum\\n    // { contractAddress => { claimIndex => { walletAddress => walletMints } } }\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) internal _mintsPerWallet;\\n\\n    // ONLY USED FOR MERKLE MINTS: stores mapping from claim to indices minted\\n    // { contractAddress => {claimIndex => { claimIndexOffset => index } } }\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) internal _claimMintIndices;\\n\\n    EnumerableSet.AddressSet private _proxyAddresses;\\n\\n    /**\\n     * @notice This extension is shared, not single-creator. So we must ensure\\n     * that a claim's initializer is an admin on the creator contract\\n     * @param creatorContractAddress    the address of the creator contract to check the admin against\\n     */\\n    modifier creatorAdminRequired(address creatorContractAddress) {\\n        AdminControl creatorCoreContract = AdminControl(creatorContractAddress);\\n        require(creatorCoreContract.isAdmin(msg.sender), \\\"Wallet is not an administrator for contract\\\");\\n        _;\\n    }\\n\\n    constructor(address delegationRegistry) {\\n        DELEGATION_REGISTRY = delegationRegistry;\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-withdraw}.\\n     */\\n    function withdraw(address payable receiver, uint256 amount) external override adminRequired {\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to transfer to receiver\\\");\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-setMembershipAddress}.\\n     */\\n    function setMembershipAddress(address membershipAddress) external override adminRequired {\\n        MEMBERSHIP_ADDRESS = membershipAddress;\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-addMintProxyAddresses}.\\n     */\\n    function addMintProxyAddresses(address[] calldata proxyAddresses) external override adminRequired {\\n        for (uint256 i; i < proxyAddresses.length;) {\\n            _proxyAddresses.add(proxyAddresses[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * See {ILazyPayableClaim-removeMintProxyAddresses}.\\n     */\\n    function removeMintProxyAddresses(address[] calldata proxyAddresses) external override adminRequired {\\n        for (uint256 i; i < proxyAddresses.length;) {\\n            _proxyAddresses.remove(proxyAddresses[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _transferFunds(address erc20, uint256 cost, address payable recipient, uint16 mintCount, bool merkle) internal {\\n        uint256 payableCost;\\n        if (erc20 != ADDRESS_ZERO) {\\n            require(IERC20(erc20).transferFrom(msg.sender, recipient, cost*mintCount), \\\"Insufficient funds\\\");\\n        } else {\\n            payableCost = cost;\\n        }\\n        if (MEMBERSHIP_ADDRESS != ADDRESS_ZERO) {\\n            if (!IManifoldMembership(MEMBERSHIP_ADDRESS).isActiveMember(msg.sender)) {\\n                payableCost += merkle ? MINT_FEE_MERKLE : MINT_FEE; \\n            }\\n        } else {\\n            payableCost += merkle ? MINT_FEE_MERKLE : MINT_FEE; \\n        }\\n        if (mintCount > 1) {\\n            payableCost *= mintCount;\\n            cost *= mintCount;\\n        }\\n\\n        // Check price\\n        require(msg.value >= payableCost, \\\"Invalid amount\\\");\\n        if (erc20 == ADDRESS_ZERO && cost != 0) {\\n            // solhint-disable-next-line\\n            (bool sent, ) = recipient.call{value: cost}(\\\"\\\");\\n            require(sent, \\\"Failed to transfer to receiver\\\");\\n        }\\n    }\\n\\n    function _transferFundsProxy(address erc20, uint256 cost, address payable recipient, uint16 mintCount, bool merkle) internal {\\n        require(erc20 == address(0) && _proxyAddresses.contains(msg.sender), \\\"Not approved\\\");\\n        uint256 payableCost = cost + (merkle ? MINT_FEE_MERKLE : MINT_FEE);\\n        if (mintCount > 1) {\\n            payableCost *= mintCount;\\n            cost *= mintCount;\\n        }\\n        // Check price\\n        require(msg.value == payableCost, \\\"Invalid amount\\\");\\n        if (cost != 0) {\\n            // solhint-disable-next-line\\n            (bool sent, ) = recipient.call{value: cost}(\\\"\\\");\\n            require(sent, \\\"Failed to transfer to receiver\\\");\\n        }\\n    }\\n\\n    function _checkMintIndex(address creatorContractAddress, uint256 claimIndex, bytes32 merkleRoot, uint32 mintIndex) internal view returns (bool) {\\n        uint256 claimMintIndex = mintIndex >> 8;\\n        require(merkleRoot != \\\"\\\", \\\"Can only check merkle claims\\\");\\n        uint256 claimMintTracking = _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex];\\n        uint256 mintBitmask = 1 << (mintIndex & MINT_INDEX_BITMASK);\\n        return mintBitmask & claimMintTracking != 0;\\n    }\\n\\n    function _validateMint(address creatorContractAddress, uint256 claimIndex, uint48 startDate, uint48 endDate, uint32 walletMax, bytes32 merkleRoot, uint32 mintIndex, bytes32[] calldata merkleProof, address mintFor) internal {\\n        // Check timestamps\\n        require(\\n            (startDate <= block.timestamp) &&\\n            (endDate == 0 || endDate >= block.timestamp),\\n            \\\"Claim inactive\\\"\\n        );\\n\\n        if (merkleRoot != \\\"\\\") {\\n            // Merkle mint\\n            _checkMerkleAndUpdate(msg.sender, creatorContractAddress, claimIndex, merkleRoot, mintIndex, merkleProof, mintFor);\\n        } else {\\n            require(mintFor == msg.sender, \\\"Invalid input\\\");\\n            // Non-merkle mint\\n            if (walletMax != 0) {\\n                require(++_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] <= walletMax, \\\"Maximum tokens already minted for this wallet\\\");\\n            }\\n        }\\n    }\\n\\n    function _validateMint(address creatorContractAddress, uint256 claimIndex, uint48 startDate, uint48 endDate, uint32 walletMax, bytes32 merkleRoot, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) internal {\\n        // Check timestamps\\n        require(\\n            (startDate <= block.timestamp) &&\\n            (endDate == 0 || endDate >= block.timestamp),\\n            \\\"Claim inactive\\\"\\n        );\\n\\n        if (merkleRoot != \\\"\\\") {\\n            require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \\\"Invalid input\\\");\\n            // Merkle mint\\n            for (uint256 i; i < mintCount;) {\\n                _checkMerkleAndUpdate(msg.sender, creatorContractAddress, claimIndex, merkleRoot, mintIndices[i], merkleProofs[i], mintFor);\\n                unchecked { ++i; }\\n            }\\n        } else {\\n            require(mintFor == msg.sender, \\\"Invalid input\\\");\\n            // Non-merkle mint\\n            if (walletMax != 0) {\\n                _mintsPerWallet[creatorContractAddress][claimIndex][mintFor] += mintCount;\\n                require(_mintsPerWallet[creatorContractAddress][claimIndex][mintFor] <= walletMax, \\\"Too many requested for this wallet\\\");\\n            }\\n        }\\n    }\\n\\n    function _validateMintProxy(address creatorContractAddress, uint256 claimIndex, uint48 startDate, uint48 endDate, uint32 walletMax, bytes32 merkleRoot, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) internal {\\n        // Check timestamps\\n        require(\\n            (startDate <= block.timestamp) &&\\n            (endDate == 0 || endDate >= block.timestamp),\\n            \\\"Claim inactive\\\"\\n        );\\n\\n        if (merkleRoot != \\\"\\\") {\\n            require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \\\"Invalid input\\\");\\n            // Merkle mint\\n            for (uint256 i; i < mintCount;) {\\n                // Proxy mints treat the mintFor as the transaction sender\\n                _checkMerkleAndUpdate(mintFor, creatorContractAddress, claimIndex, merkleRoot, mintIndices[i], merkleProofs[i], mintFor);\\n                unchecked { ++i; }\\n            }\\n        } else {\\n            // Non-merkle mint\\n            if (walletMax != 0) {\\n                _mintsPerWallet[creatorContractAddress][claimIndex][mintFor] += mintCount;\\n                require(_mintsPerWallet[creatorContractAddress][claimIndex][mintFor] <= walletMax, \\\"Too many requested for this wallet\\\");\\n            }\\n        }\\n    }\\n\\n    function _checkMerkleAndUpdate(address sender, address creatorContractAddress, uint256 claimIndex, bytes32 merkleRoot, uint32 mintIndex, bytes32[] memory merkleProof, address mintFor) private {\\n        // Merkle mint\\n        bytes32 leaf;\\n        if (mintFor == sender) {\\n            leaf = keccak256(abi.encodePacked(sender, mintIndex));\\n        } else {\\n            // Direct verification failed, try delegate verification\\n            IDelegationRegistry dr = IDelegationRegistry(DELEGATION_REGISTRY);\\n            require(dr.checkDelegateForContract(sender, mintFor, address(this)), \\\"Invalid delegate\\\");\\n            leaf = keccak256(abi.encodePacked(mintFor, mintIndex));\\n        }\\n        require(MerkleProof.verify(merkleProof, merkleRoot, leaf), \\\"Could not verify merkle proof\\\");\\n\\n        // Check if mintIndex has been minted\\n        uint256 claimMintIndex = mintIndex >> 8;\\n        uint256 claimMintTracking = _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex];\\n        uint256 mintBitmask = 1 << (mintIndex & MINT_INDEX_BITMASK);\\n        require(mintBitmask & claimMintTracking == 0, \\\"Already minted\\\");\\n        _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] = claimMintTracking | mintBitmask;\\n    }\\n\\n    function _getTotalMints(uint32 walletMax, address minter, address creatorContractAddress, uint256 claimIndex) internal view returns(uint32) {\\n        require(walletMax != 0, \\\"Can only retrieve for non-merkle claims with walletMax\\\");\\n        return uint32(_mintsPerWallet[creatorContractAddress][claimIndex][minter]);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/IERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator interface\\n */\\ninterface IERC1155CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintBaseNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token with no extension. Can only be called by an admin.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev mint a token from an extension. Can only be called by a registered extension.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintExtensionNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token from extension. Can only be called by a registered extension.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev burn tokens. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given tokenId.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/manifold/lazyclaim/ILazyPayableClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * Lazy Payable Claim interface\\n */\\ninterface ILazyPayableClaim {\\n    enum StorageProtocol { INVALID, NONE, ARWEAVE, IPFS }\\n    \\n    event ClaimInitialized(address indexed creatorContract, uint256 indexed claimIndex, address initializer);\\n    event ClaimUpdated(address indexed creatorContract, uint256 indexed claimIndex);\\n    event ClaimMint(address indexed creatorContract, uint256 indexed claimIndex);\\n    event ClaimMintBatch(address indexed creatorContract, uint256 indexed claimIndex, uint16 mintCount);\\n    event ClaimMintProxy(address indexed creatorContract, uint256 indexed claimIndex, uint16 mintCount, address proxy, address mintFor);\\n\\n    /**\\n     * @notice Withdraw funds\\n     */\\n    function withdraw(address payable receiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Set the Manifold Membership address\\n     */\\n    function setMembershipAddress(address membershipAddress) external;\\n\\n    /**\\n     * @notice Add mint proxy addresses\\n     */\\n    function addMintProxyAddresses(address[] calldata proxyAddresses) external;\\n\\n    /**\\n     * @notice Remove mint proxy addresses\\n     */\\n    function removeMintProxyAddresses(address[] calldata proxyAddresses) external;\\n\\n    /**\\n     * @notice check if a mint index has been consumed or not (only for merkle claims)\\n     *\\n     * @param creatorContractAddress    the address of the creator contract for the claim\\n     * @param claimIndex                the index of the claim\\n     * @param mintIndex                 the mint index of the claim\\n     * @return                          whether or not the mint index was consumed\\n     */\\n    function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) external view returns(bool);\\n\\n    /**\\n     * @notice check if multiple mint indices has been consumed or not (only for merkle claims)\\n     *\\n     * @param creatorContractAddress    the address of the creator contract for the claim\\n     * @param claimIndex                the index of the claim\\n     * @param mintIndices               the mint index of the claim\\n     * @return                          whether or not the mint index was consumed\\n     */\\n    function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external view returns(bool[] memory);\\n\\n    /**\\n     * @notice get mints made for a wallet (only for non-merkle claims with walletMax)\\n     *\\n     * @param minter                    the address of the minting address\\n     * @param creatorContractAddress    the address of the creator contract for the claim\\n     * @param claimIndex                the index of the claim\\n     * @return                          how many mints the minter has made\\n     */\\n    function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external view returns(uint32);\\n\\n    /**\\n     * @notice allow a wallet to lazily claim a token according to parameters\\n     * @param creatorContractAddress    the creator contract address\\n     * @param claimIndex                the index of the claim for which we will mint\\n     * @param mintIndex                 the mint index (only needed for merkle claims)\\n     * @param merkleProof               if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\\n     * @param mintFor                   mintFor must be the msg.sender or a delegate wallet address (in the case of merkle based mints)\\n     */\\n    function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof, address mintFor) external payable;\\n\\n    /**\\n     * @notice allow a wallet to lazily claim a token according to parameters\\n     * @param creatorContractAddress    the creator contract address\\n     * @param claimIndex                the index of the claim for which we will mint\\n     * @param mintCount                 the number of claims to mint\\n     * @param mintIndices               the mint index (only needed for merkle claims)\\n     * @param merkleProofs              if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\\n     * @param mintFor                   mintFor must be the msg.sender or a delegate wallet address (in the case of merkle based mints)\\n     */\\n    function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable;\\n\\n    /**\\n     * @notice allow a proxy to mint a token for another address (non-merkle mints only)\\n     * @param creatorContractAddress    the creator contract address\\n     * @param claimIndex                the index of the claim for which we will mint\\n     * @param mintCount                 the number of claims to mint\\n     * @param mintIndices               the mint index (only needed for merkle claims)\\n     * @param merkleProofs              if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\\n     * @param mintFor                   the address to mint for\\n     */\\n    function mintProxy(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs, address mintFor) external payable;\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/manifold-membership/IManifoldMembership.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * Manifold Membership interface\\n */\\ninterface IManifoldMembership {\\n   function isActiveMember(address sender) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/libraries/delegation-registry/IDelegationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n * from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(address vault, address delegate, address contract_, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(address vault, address delegate, address contract_, uint256 tokenId, bool value);\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(address delegate, address contract_, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(address delegate, address contract_, uint256 tokenId, bool value) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(address delegate) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(address vault) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(address vault, address contract_) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(address vault)\\n        external\\n        view\\n        returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(address vault) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(address delegate, address vault) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(address delegate, address vault, address contract_)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(address delegate, address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/manifold/lazyclaim/IERC721LazyPayableClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ILazyPayableClaim.sol\\\";\\n\\n/**\\n * Lazy Payable Claim interface\\n */\\ninterface IERC721LazyPayableClaim is ILazyPayableClaim {\\n    struct ClaimParameters {\\n        uint32 totalMax;\\n        uint32 walletMax;\\n        uint48 startDate;\\n        uint48 endDate;\\n        StorageProtocol storageProtocol;\\n        bool identical;\\n        bytes32 merkleRoot;\\n        string location;\\n        uint256 cost;\\n        address payable paymentReceiver;\\n        address erc20;\\n    }\\n\\n    struct Claim {\\n        uint32 total;\\n        uint32 totalMax;\\n        uint32 walletMax;\\n        uint48 startDate;\\n        uint48 endDate;\\n        StorageProtocol storageProtocol;\\n        bool identical;\\n        bytes32 merkleRoot;\\n        string location;\\n        uint256 cost;\\n        address payable paymentReceiver;\\n        address erc20;\\n    }\\n\\n    /**\\n     * @notice initialize a new claim, emit initialize event, and return the newly created index\\n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\\n     */\\n    function initializeClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\\n\\n    /**\\n     * @notice update an existing claim at claimIndex\\n     * @param creatorContractAddress    the creator contract corresponding to the claim\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\\n     */\\n    function updateClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\\n\\n    /**\\n     * @notice update tokenURI parameters for an existing claim at claimIndex\\n     * @param creatorContractAddress    the creator contract corresponding to the claim\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param storageProtocol           the new storage protocol\\n     * @param identical                 the new value of identical\\n     * @param location                  the new location\\n     */\\n    function updateTokenURIParams(address creatorContractAddress, uint256 claimIndex, StorageProtocol storageProtocol, bool identical, string calldata location) external;\\n\\n    /**\\n     * @notice get a claim corresponding to a creator contract and index\\n     * @param creatorContractAddress    the address of the creator contract\\n     * @param claimIndex                the index of the claim\\n     * @return                          the claim object\\n     */\\n    function getClaim(address creatorContractAddress, uint256 claimIndex) external view returns(Claim memory);\\n\\n    /**\\n     * @notice allow admin to airdrop arbitrary tokens \\n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\\n     * @param recipients                addresses to airdrop to\\n     * @param amounts                   number of tokens to airdrop to each address in addresses\\n     */\\n    function airdrop(address creatorContractAddress, uint256 claimIndex, address[] calldata recipients, uint16[] calldata amounts) external;\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\nimport \\\"../extensions/ICreatorExtensionRoyalties.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal _tokenCount = 0;\\n\\n    // Base approve transfers address location\\n    address internal _approveTransferBase;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n    mapping (address => address) internal _extensionPermissions;\\n    mapping (address => bool) internal _extensionApproveTransfers;\\n    \\n    // For tracking which extension a token was minted by\\n    mapping (uint256 => address) internal _tokensExtension;\\n\\n    // The baseURI for a given extension\\n    mapping (address => string) private _extensionBaseURI;\\n    mapping (address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping (address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping (uint256 => string) internal _tokenURIs;\\n\\n    // Royalty configurations\\n    struct RoyaltyConfig {\\n        address payable receiver;\\n        uint16 bps;\\n    }\\n    mapping (address => RoyaltyConfig[]) internal _extensionRoyalty;\\n    mapping (uint256 => RoyaltyConfig[]) internal _tokenRoyalty;\\n\\n    bytes4 private constant _CREATOR_CORE_V1 = 0x28f10a21;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(ICreatorCore).interfaceId || interfaceId == _CREATOR_CORE_V1 || super.supportsInterface(interfaceId)\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    function requireExtension() internal view {\\n        require(_extensions.contains(msg.sender), \\\"Must be registered extension\\\");\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    function requireNonBlacklist(address extension) internal view {\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n    }   \\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions() external view override returns (address[] memory extensions) {\\n        extensions = new address[](_extensions.length());\\n        for (uint i; i < _extensions.length();) {\\n            extensions[i] = _extensions.at(i);\\n            unchecked { ++i; }\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal {\\n        require(extension != address(this) && extension.isContract(), \\\"Invalid\\\");\\n        emit ExtensionRegistered(extension, msg.sender);\\n        _extensionBaseURI[extension] = baseURI;\\n        _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n        _extensions.add(extension);\\n        _setApproveTransferExtension(extension, true);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransferExtension}.\\n     */\\n    function setApproveTransferExtension(bool enabled) external override {\\n        requireExtension();\\n        _setApproveTransferExtension(msg.sender, enabled);\\n    }\\n\\n    /**\\n     * @dev Set whether or not tokens minted by the extension defers transfer approvals to the extension\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n        emit ExtensionUnregistered(extension, msg.sender);\\n        _extensions.remove(extension);\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n       require(extension != address(0) && extension != address(this), \\\"Cannot blacklist yourself\\\");\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n       if (!_blacklistedExtensions.contains(extension)) {\\n           emit ExtensionBlacklisted(extension, msg.sender);\\n           _blacklistedExtensions.add(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical) internal {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string memory uri) internal {\\n        _extensionBaseURI[address(0)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(0)] = prefix;\\n    }\\n\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(tokenId > 0 && tokenId <= _tokenCount && _tokensExtension[tokenId] == address(0), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n\\n        address extension = _tokensExtension[tokenId];\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return string(abi.encodePacked(_extensionURIPrefix[extension],_tokenURIs[tokenId]));\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionTokenURI).interfaceId)) {\\n            return ICreatorExtensionTokenURI(extension).tokenURI(address(this), tokenId);\\n        }\\n\\n        if (!_extensionBaseURIIdentical[extension]) {\\n            return string(abi.encodePacked(_extensionBaseURI[extension], tokenId.toString()));\\n        } else {\\n            return _extensionBaseURI[extension];\\n        }\\n    }\\n\\n    /**\\n     * Get token extension\\n     */\\n    function _tokenExtension(uint256 tokenId) internal view returns (address extension) {\\n        extension = _tokensExtension[tokenId];\\n\\n        require(extension != address(0), \\\"No extension for token\\\");\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        return extension;\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId) view internal returns (address payable[] memory receivers, uint256[] memory bps) {\\n\\n        // Get token level royalties\\n        RoyaltyConfig[] memory royalties = _tokenRoyalty[tokenId];\\n        if (royalties.length == 0) {\\n            // Get extension specific royalties\\n            address extension = _tokensExtension[tokenId];\\n            if (extension != address(0)) {\\n                if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionRoyalties).interfaceId)) {\\n                    (receivers, bps) = ICreatorExtensionRoyalties(extension).getRoyalties(address(this), tokenId);\\n                    // Extension override exists, just return that\\n                    if (receivers.length > 0) return (receivers, bps);\\n                }\\n                royalties = _extensionRoyalty[extension];\\n            }\\n        }\\n        if (royalties.length == 0) {\\n            // Get the default royalty\\n            royalties = _extensionRoyalty[address(0)];\\n        }\\n        \\n        if (royalties.length > 0) {\\n            receivers = new address payable[](royalties.length);\\n            bps = new uint256[](royalties.length);\\n            for (uint i; i < royalties.length;) {\\n                receivers[i] = royalties[i].receiver;\\n                bps[i] = royalties[i].bps;\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId) view internal returns (address payable[] memory recievers) {\\n        (recievers, ) = _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId) view internal returns (uint256[] memory bps) {\\n        (, bps) = _getRoyalties(tokenId);\\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value) view internal returns (address receiver, uint256 amount){\\n        (address payable[] memory receivers, uint256[] memory bps) = _getRoyalties(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n        \\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], bps[0]*value/10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n       _checkRoyalties(receivers, basisPoints);\\n        delete _tokenRoyalty[tokenId];\\n        _setRoyalties(receivers, basisPoints, _tokenRoyalty[tokenId]);\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        _checkRoyalties(receivers, basisPoints);\\n        delete _extensionRoyalty[extension];\\n        _setRoyalties(receivers, basisPoints, _extensionRoyalty[extension]);\\n        if (extension == address(0)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n\\n    /**\\n     * Helper function to check that royalties provided are valid\\n     */\\n    function _checkRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) private pure {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i; i < basisPoints.length;) {\\n            totalBasisPoints += basisPoints[i];\\n            unchecked { ++i; }\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n    }\\n\\n    /**\\n     * Helper function to set royalties\\n     */\\n    function _setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints, RoyaltyConfig[] storage royalties) private {\\n        for (uint i; i < basisPoints.length;) {\\n            royalties.push(\\n                RoyaltyConfig(\\n                    {\\n                        receiver: receivers[i],\\n                        bps: uint16(basisPoints[i])\\n                    }\\n                )\\n            );\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getApproveTransfer}.\\n     */\\n    function getApproveTransfer() external view override returns (address) {\\n        return _approveTransferBase;\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ApproveTransferUpdated(address extension);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Set the default approve transfer contract location.\\n     */\\n    function setApproveTransfer(address extension) external; \\n\\n    /**\\n     * @dev Get the default approve transfer contract location.\\n     */\\n    function getApproveTransfer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable royalties\\n */\\ninterface ICreatorExtensionRoyalties is IERC165 {\\n\\n    /**\\n     * Get the royalties for a given creator/tokenId\\n     */\\n    function getRoyalties(address creator, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "0x2aca032684ec714210b91abf7bb9df0a3f2ee84b": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SCHMR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: Schmryptopen Edition\\n/// @author: manifold.xyz\\n\\nimport \\\"./manifold/ERC1155Creator.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                //\\n//                                                                                                                                //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@CHECK#1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@CHECK#69@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###########################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@################################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@###################################################################@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@##########################=======================##########################@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@############################0                       0############################@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@##############################0 SCHMRYPTOPEN EDITION! 0##############################@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@################################0   MARCH 19th, 2023    0###############################@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@#################################0                       0#################################@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@##################################=======================##################################@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@#############################################################################################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@###############################################################@@@@@#########################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@#############################################################@@@@@@@@@#######################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@###########################################################@@@@@@@@@@@#######################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@###########################################################@@@@@@@@@@@###########################@@@@@@@@@@@    //\\n//    @@@@@@@@@#############################################################@@@@@@@@@@@###############################@@@@@@@@    //\\n//    @@@@@@@#############################################################@@@@@@@@@@@##################################@@@@@@@    //\\n//    @@@@@@############################################################@@@@@@@@@@@######################################@@@@@    //\\n//    @@@@@############################################################@@@@@@@@@@@########################################@@@@    //\\n//    @@@@###########################################################@@@@@@@@@@@###########################################@@@    //\\n//    @@@@#########################################################@@@@@@@@@@@#############################################@@@    //\\n//    @@@@########################################################@@@@@@@@@@@##############################################@@@    //\\n//    @@@@###################################@@@@@##############@@@@@@@@@@@################################################@@@    //\\n//    @@@@#################################@@@@@@@@@@#########@@@@@@@@@@@@#################################################@@@    //\\n//    @@@@@################################@@@@@@@@@@@@######@@@@@@@@@@@##################################################@@@@    //\\n//    @@@@@@#################################@@@@@@@@@@@@@#@@@@@@@@@@@###################################################@@@@@    //\\n//    @@@@@@@##################################@@@@@@@@@@@@@@@@@@@@@####################################################@@@@@@    //\\n//    @@@@@@@@@@##################################@@@@@@@@@@@@@@@@@##################################################@@@@@@@@@    //\\n//    @@@@@@@@@@@@##################################@@@@@@@@@@@@@##################################################@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@###################################@@@@@@@@##################################################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@#############################################################################################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@#############################################################################################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@#############################################################################################@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@###########################################################################################@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@###########################################################################################@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@#######################################################################################@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@#####################################################################################@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@#################################################################################@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@###########################################################################@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@#################################################################@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###############################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@CHECK#420@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##########################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SCHMRYPTO@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    //\\n//                                                                                                                                //\\n//                                                                                                                                //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\ncontract SCHMR is ERC1155Creator {\\n    constructor() ERC1155Creator(\\\"Schmryptopen Edition\\\", \\\"SCHMR\\\") {}\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/ERC1155Creator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\ncontract ERC1155Creator is Proxy {\\n\\n    constructor(string memory name, string memory symbol) {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x6bf5ed59dE0E19999d264746843FF931c0133090;\\n        (bool success, ) = 0x6bf5ed59dE0E19999d264746843FF931c0133090.delegatecall(abi.encodeWithSignature(\\\"initialize(string,string)\\\", name, symbol));\\n        require(success, \\\"Initialization failed\\\");\\n    }\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n     function implementation() public view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function _implementation() internal override view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "0x6bf5ed59de0e19999d264746843ff931c0133090": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC1155CreatorImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\\\";\\n\\nimport \\\"./core/ERC1155CreatorCore.sol\\\";\\n\\n/**\\n * @dev ERC1155Creator implementation\\n */\\ncontract ERC1155CreatorImplementation is AdminControlUpgradeable, ERC1155Upgradeable, ERC1155CreatorCore {\\n\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * Initializer\\n     */\\n    function initialize(string memory _name, string memory _symbol) public initializer {\\n        __ERC1155_init(\\\"\\\");\\n        __Ownable_init();\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Upgradeable, ERC1155CreatorCore, AdminControlUpgradeable) returns (bool) {\\n        return ERC1155CreatorCore.supportsInterface(interfaceId) || ERC1155Upgradeable.supportsInterface(interfaceId) || AdminControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory) internal virtual override {\\n        _approveTransfer(from, to, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external override adminRequired {\\n        requireNonBlacklist(extension);\\n        _registerExtension(extension, baseURI, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external override adminRequired {\\n        requireNonBlacklist(extension);\\n        _registerExtension(extension, baseURI, baseURIIdentical);\\n    }\\n\\n\\n    /**\\n     * @dev See {ICreatorCore-unregisterExtension}.\\n     */\\n    function unregisterExtension(address extension) external override adminRequired {\\n        _unregisterExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-blacklistExtension}.\\n     */\\n    function blacklistExtension(address extension) external override adminRequired {\\n        _blacklistExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri_) external override {\\n        requireExtension();\\n        _setBaseTokenURIExtension(uri_, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri_, bool identical) external override {\\n        requireExtension();\\n        _setBaseTokenURIExtension(uri_, identical);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external override {\\n        requireExtension();\\n        _setTokenURIPrefixExtension(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri_) external override {\\n        requireExtension();\\n        _setTokenURIExtension(tokenId, uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenIds, string[] calldata uris) external override {\\n        requireExtension();\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i; i < tokenIds.length;) {\\n            _setTokenURIExtension(tokenIds[i], uris[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURI}.\\n     */\\n    function setBaseTokenURI(string calldata uri_) external override adminRequired {\\n        _setBaseTokenURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\\n        _setTokenURIPrefix(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri_) external override adminRequired {\\n        _setTokenURI(tokenId, uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external override adminRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i; i < tokenIds.length;) {\\n            _setTokenURI(tokenIds[i], uris[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setMintPermissions}.\\n     */\\n    function setMintPermissions(address extension, address permissions) external override adminRequired {\\n        _setMintPermissions(extension, permissions);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintBaseNew}.\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) public virtual override nonReentrant adminRequired returns(uint256[] memory) {\\n        return _mintNew(address(0), to, amounts, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintBaseExisting}.\\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant adminRequired {\\n        for (uint i; i < tokenIds.length;) {\\n            uint256 tokenId = tokenIds[i];\\n            require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n            require(_tokensExtension[tokenId] == address(0), \\\"Token created by extension\\\");\\n            unchecked { ++i; }\\n        }\\n        _mintExisting(address(0), to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintExtensionNew}.\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) public virtual override nonReentrant returns(uint256[] memory tokenIds) {\\n        requireExtension();\\n        return _mintNew(msg.sender, to, amounts, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintExtensionExisting}.\\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant {\\n        requireExtension();\\n        for (uint i; i < tokenIds.length;) {\\n            require(_tokensExtension[tokenIds[i]] == address(msg.sender), \\\"Token not created by this extension\\\");\\n            unchecked { ++i; }\\n        }\\n        _mintExisting(msg.sender, to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev Mint new tokens\\n     */\\n    function _mintNew(address extension, address[] memory to, uint256[] memory amounts, string[] memory uris) internal returns(uint256[] memory tokenIds) {\\n        if (to.length > 1) {\\n            // Multiple receiver.  Give every receiver the same new token\\n            tokenIds = new uint256[](1);\\n            require(uris.length <= 1 && (amounts.length == 1 || to.length == amounts.length), \\\"Invalid input\\\");\\n        } else {\\n            // Single receiver.  Generating multiple tokens\\n            tokenIds = new uint256[](amounts.length);\\n            require(uris.length == 0 || amounts.length == uris.length, \\\"Invalid input\\\");\\n        }\\n\\n        // Assign tokenIds\\n        for (uint i; i < tokenIds.length;) {\\n            ++_tokenCount;\\n            tokenIds[i] = _tokenCount;\\n            // Track the extension that minted the token\\n            _tokensExtension[_tokenCount] = extension;\\n            unchecked { ++i; }\\n        }\\n\\n        if (extension != address(0)) {\\n            _checkMintPermissions(to, tokenIds, amounts);\\n        }\\n\\n        if (to.length == 1 && tokenIds.length == 1) {\\n           // Single mint\\n           _mint(to[0], tokenIds[0], amounts[0], new bytes(0));\\n        } else if (to.length > 1) {\\n            // Multiple receivers.  Receiving the same token\\n            if (amounts.length == 1) {\\n                // Everyone receiving the same amount\\n                for (uint i; i < to.length;) {\\n                    _mint(to[i], tokenIds[0], amounts[0], new bytes(0));\\n                    unchecked { ++i; }\\n                }\\n            } else {\\n                // Everyone receiving different amounts\\n                for (uint i; i < to.length;) {\\n                    _mint(to[i], tokenIds[0], amounts[i], new bytes(0));\\n                    unchecked { ++i; }\\n                }\\n            }\\n        } else {\\n            _mintBatch(to[0], tokenIds, amounts, new bytes(0));\\n        }\\n\\n        for (uint i; i < tokenIds.length;) {\\n            if (i < uris.length && bytes(uris[i]).length > 0) {\\n                _tokenURIs[tokenIds[i]] = uris[i];\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint existing tokens\\n     */\\n    function _mintExisting(address extension, address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        if (extension != address(0)) {\\n            _checkMintPermissions(to, tokenIds, amounts);\\n        }\\n\\n        if (to.length == 1 && tokenIds.length == 1 && amounts.length == 1) {\\n             // Single mint\\n            _mint(to[0], tokenIds[0], amounts[0], new bytes(0));            \\n        } else if (to.length == 1 && tokenIds.length == amounts.length) {\\n            // Batch mint to same receiver\\n            _mintBatch(to[0], tokenIds, amounts, new bytes(0));\\n        } else if (tokenIds.length == 1 && amounts.length == 1) {\\n            // Mint of the same token/token amounts to various receivers\\n            for (uint i; i < to.length;) {\\n                _mint(to[i], tokenIds[0], amounts[0], new bytes(0));\\n                unchecked { ++i; }\\n            }\\n        } else if (tokenIds.length == 1 && to.length == amounts.length) {\\n            // Mint of the same token with different amounts to different receivers\\n            for (uint i; i < to.length;) {\\n                _mint(to[i], tokenIds[0], amounts[i], new bytes(0));\\n                unchecked { ++i; }\\n            }\\n        } else if (to.length == tokenIds.length && to.length == amounts.length) {\\n            // Mint of different tokens and different amounts to different receivers\\n            for (uint i; i < to.length;) {\\n                _mint(to[i], tokenIds[i], amounts[i], new bytes(0));\\n                unchecked { ++i; }\\n            }\\n        } else {\\n            revert(\\\"Invalid input\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-tokenExtension}.\\n     */\\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenExtension(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-burn}.\\n     */\\n    function burn(address account, uint256[] memory tokenIds, uint256[] memory amounts) public virtual override nonReentrant {\\n        require(account == msg.sender || isApprovedForAll(account, msg.sender), \\\"Caller is not owner nor approved\\\");\\n        require(tokenIds.length == amounts.length, \\\"Invalid input\\\");\\n        if (tokenIds.length == 1) {\\n            _burn(account, tokenIds[0], amounts[0]);\\n        } else {\\n            _burnBatch(account, tokenIds, amounts);\\n        }\\n        _postBurn(account, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(address(0), receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyalties(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyaltiesExtension}.\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(extension, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getRoyalties}.\\n     */\\n    function getRoyalties(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFees}.\\n     */\\n    function getFees(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFeeRecipients}.\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual override returns (address payable[] memory) {\\n        return _getRoyaltyReceivers(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getFeeBps}.\\n     */\\n    function getFeeBps(uint256 tokenId) external view virtual override returns (uint[] memory) {\\n        return _getRoyaltyBPS(tokenId);\\n    }\\n    \\n    /**\\n     * @dev See {ICreatorCore-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual override returns (address, uint256) {\\n        return _getRoyaltyInfo(tokenId, value);\\n    } \\n\\n    /**\\n     * @dev See {IERC1155-uri}.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n    \\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 tokenId) external view virtual override returns (uint256) {\\n        return _totalSupply[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint i; i < ids.length;) {\\n            _totalSupply[ids[i]] += amounts[i];\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint i; i < ids.length;) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransfer}.\\n     */\\n    function setApproveTransfer(address extension) external override adminRequired {\\n        _setApproveTransferBase(extension);\\n    }\\n}\"\r\n    },\r\n    \"contracts/core/CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\nimport \\\"../extensions/ICreatorExtensionRoyalties.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal _tokenCount = 0;\\n\\n    // Base approve transfers address location\\n    address internal _approveTransferBase;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n    mapping (address => address) internal _extensionPermissions;\\n    mapping (address => bool) internal _extensionApproveTransfers;\\n    \\n    // For tracking which extension a token was minted by\\n    mapping (uint256 => address) internal _tokensExtension;\\n\\n    // The baseURI for a given extension\\n    mapping (address => string) private _extensionBaseURI;\\n    mapping (address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping (address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping (uint256 => string) internal _tokenURIs;\\n\\n    // Royalty configurations\\n    struct RoyaltyConfig {\\n        address payable receiver;\\n        uint16 bps;\\n    }\\n    mapping (address => RoyaltyConfig[]) internal _extensionRoyalty;\\n    mapping (uint256 => RoyaltyConfig[]) internal _tokenRoyalty;\\n\\n    bytes4 private constant _CREATOR_CORE_V1 = 0x28f10a21;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(ICreatorCore).interfaceId || interfaceId == _CREATOR_CORE_V1 || super.supportsInterface(interfaceId)\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    function requireExtension() internal view {\\n        require(_extensions.contains(msg.sender), \\\"Must be registered extension\\\");\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    function requireNonBlacklist(address extension) internal view {\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n    }   \\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions() external view override returns (address[] memory extensions) {\\n        extensions = new address[](_extensions.length());\\n        for (uint i; i < _extensions.length();) {\\n            extensions[i] = _extensions.at(i);\\n            unchecked { ++i; }\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal {\\n        require(extension != address(this) && extension.isContract(), \\\"Invalid\\\");\\n        emit ExtensionRegistered(extension, msg.sender);\\n        _extensionBaseURI[extension] = baseURI;\\n        _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n        _extensions.add(extension);\\n        _setApproveTransferExtension(extension, true);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransferExtension}.\\n     */\\n    function setApproveTransferExtension(bool enabled) external override {\\n        requireExtension();\\n        _setApproveTransferExtension(msg.sender, enabled);\\n    }\\n\\n    /**\\n     * @dev Set whether or not tokens minted by the extension defers transfer approvals to the extension\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n        emit ExtensionUnregistered(extension, msg.sender);\\n        _extensions.remove(extension);\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n       require(extension != address(0) && extension != address(this), \\\"Cannot blacklist yourself\\\");\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n       if (!_blacklistedExtensions.contains(extension)) {\\n           emit ExtensionBlacklisted(extension, msg.sender);\\n           _blacklistedExtensions.add(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical) internal {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string memory uri) internal {\\n        _extensionBaseURI[address(0)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(0)] = prefix;\\n    }\\n\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(tokenId > 0 && tokenId <= _tokenCount && _tokensExtension[tokenId] == address(0), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n\\n        address extension = _tokensExtension[tokenId];\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return string(abi.encodePacked(_extensionURIPrefix[extension],_tokenURIs[tokenId]));\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionTokenURI).interfaceId)) {\\n            return ICreatorExtensionTokenURI(extension).tokenURI(address(this), tokenId);\\n        }\\n\\n        if (!_extensionBaseURIIdentical[extension]) {\\n            return string(abi.encodePacked(_extensionBaseURI[extension], tokenId.toString()));\\n        } else {\\n            return _extensionBaseURI[extension];\\n        }\\n    }\\n\\n    /**\\n     * Get token extension\\n     */\\n    function _tokenExtension(uint256 tokenId) internal view returns (address extension) {\\n        extension = _tokensExtension[tokenId];\\n\\n        require(extension != address(0), \\\"No extension for token\\\");\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        return extension;\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId) view internal returns (address payable[] memory receivers, uint256[] memory bps) {\\n\\n        // Get token level royalties\\n        RoyaltyConfig[] memory royalties = _tokenRoyalty[tokenId];\\n        if (royalties.length == 0) {\\n            // Get extension specific royalties\\n            address extension = _tokensExtension[tokenId];\\n            if (extension != address(0)) {\\n                if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionRoyalties).interfaceId)) {\\n                    (receivers, bps) = ICreatorExtensionRoyalties(extension).getRoyalties(address(this), tokenId);\\n                    // Extension override exists, just return that\\n                    if (receivers.length > 0) return (receivers, bps);\\n                }\\n                royalties = _extensionRoyalty[extension];\\n            }\\n        }\\n        if (royalties.length == 0) {\\n            // Get the default royalty\\n            royalties = _extensionRoyalty[address(0)];\\n        }\\n        \\n        if (royalties.length > 0) {\\n            receivers = new address payable[](royalties.length);\\n            bps = new uint256[](royalties.length);\\n            for (uint i; i < royalties.length;) {\\n                receivers[i] = royalties[i].receiver;\\n                bps[i] = royalties[i].bps;\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId) view internal returns (address payable[] memory recievers) {\\n        (recievers, ) = _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId) view internal returns (uint256[] memory bps) {\\n        (, bps) = _getRoyalties(tokenId);\\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value) view internal returns (address receiver, uint256 amount){\\n        (address payable[] memory receivers, uint256[] memory bps) = _getRoyalties(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n        \\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], bps[0]*value/10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n       _checkRoyalties(receivers, basisPoints);\\n        delete _tokenRoyalty[tokenId];\\n        _setRoyalties(receivers, basisPoints, _tokenRoyalty[tokenId]);\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        _checkRoyalties(receivers, basisPoints);\\n        delete _extensionRoyalty[extension];\\n        _setRoyalties(receivers, basisPoints, _extensionRoyalty[extension]);\\n        if (extension == address(0)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n\\n    /**\\n     * Helper function to check that royalties provided are valid\\n     */\\n    function _checkRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) private pure {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i; i < basisPoints.length;) {\\n            totalBasisPoints += basisPoints[i];\\n            unchecked { ++i; }\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n    }\\n\\n    /**\\n     * Helper function to set royalties\\n     */\\n    function _setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints, RoyaltyConfig[] storage royalties) private {\\n        for (uint i; i < basisPoints.length;) {\\n            royalties.push(\\n                RoyaltyConfig(\\n                    {\\n                        receiver: receivers[i],\\n                        bps: uint16(basisPoints[i])\\n                    }\\n                )\\n            );\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getApproveTransfer}.\\n     */\\n    function getApproveTransfer() external view override returns (address) {\\n        return _approveTransferBase;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../extensions/ERC1155/IERC1155CreatorExtensionApproveTransfer.sol\\\";\\nimport \\\"../extensions/ERC1155/IERC1155CreatorExtensionBurnable.sol\\\";\\nimport \\\"../permissions/ERC1155/IERC1155CreatorMintPermissions.sol\\\";\\nimport \\\"./IERC1155CreatorCore.sol\\\";\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator implementation\\n */\\nabstract contract ERC1155CreatorCore is CreatorCore, IERC1155CreatorCore {\\n\\n    uint256 constant public VERSION = 2;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    string public name;\\n    string public symbol;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(CreatorCore, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155CreatorCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {CreatorCore-_setApproveTransferExtension}\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal override {\\n        if (ERC165Checker.supportsInterface(extension, type(IERC1155CreatorExtensionApproveTransfer).interfaceId)) {\\n            _extensionApproveTransfers[extension] = enabled;\\n            emit ExtensionApproveTransferUpdated(extension, enabled);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the base contract's approve transfer contract location\\n     */\\n    function _setApproveTransferBase(address extension) internal {\\n        _approveTransferBase = extension;\\n        emit ApproveTransferUpdated(extension);\\n    }\\n\\n    /**\\n     * @dev Set mint permissions for an extension\\n     */\\n    function _setMintPermissions(address extension, address permissions) internal {\\n        require(_extensions.contains(extension), \\\"Invalid extension\\\");\\n        require(permissions == address(0) || ERC165Checker.supportsInterface(permissions, type(IERC1155CreatorMintPermissions).interfaceId), \\\"Invalid address\\\");\\n        if (_extensionPermissions[extension] != permissions) {\\n            _extensionPermissions[extension] = permissions;\\n            emit MintPermissionsUpdated(extension, permissions, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * Check if an extension can mint\\n     */\\n    function _checkMintPermissions(address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        if (_extensionPermissions[msg.sender] != address(0)) {\\n            IERC1155CreatorMintPermissions(_extensionPermissions[msg.sender]).approveMint(msg.sender, to, tokenIds, amounts);\\n        }\\n    }\\n\\n    /**\\n     * Post burn actions\\n     */\\n    function _postBurn(address owner, uint256[] memory tokenIds, uint256[] memory amounts) internal virtual {\\n        require(tokenIds.length > 0, \\\"Invalid input\\\");\\n        address extension = _tokensExtension[tokenIds[0]];\\n        for (uint i; i < tokenIds.length;) {\\n            require(_tokensExtension[tokenIds[i]] == extension, \\\"Mismatched token originators\\\");\\n            unchecked { ++i; }\\n        }\\n        // Callback to originating extension if needed\\n        if (extension != address(0)) {\\n           if (ERC165Checker.supportsInterface(extension, type(IERC1155CreatorExtensionBurnable).interfaceId)) {\\n               IERC1155CreatorExtensionBurnable(extension).onBurn(owner, tokenIds, amounts);\\n           }\\n        }\\n    }\\n\\n    /**\\n     * Approve a transfer\\n     */\\n    function _approveTransfer(address from, address to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        require(tokenIds.length > 0, \\\"Invalid input\\\");\\n        address extension = _tokensExtension[tokenIds[0]];\\n        for (uint i; i < tokenIds.length;) {\\n            require(_tokensExtension[tokenIds[i]] == extension, \\\"Mismatched token originators\\\");\\n            unchecked { ++i; }\\n        }\\n        if (_extensionApproveTransfers[extension]) {\\n            require(IERC1155CreatorExtensionApproveTransfer(extension).approveTransfer(msg.sender, from, to, tokenIds, amounts), \\\"Extension approval failure\\\");\\n        } else if (_approveTransferBase != address(0)) {\\n            require(IERC1155CreatorExtensionApproveTransfer(_approveTransferBase).approveTransfer(msg.sender, from, to, tokenIds, amounts), \\\"Extension approval failure\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ApproveTransferUpdated(address extension);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Set the default approve transfer contract location.\\n     */\\n    function setApproveTransfer(address extension) external; \\n\\n    /**\\n     * @dev Get the default approve transfer contract location.\\n     */\\n    function getApproveTransfer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/core/IERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator interface\\n */\\ninterface IERC1155CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintBaseNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token with no extension. Can only be called by an admin.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev mint a token from an extension. Can only be called by a registered extension.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintExtensionNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token from extension. Can only be called by a registered extension.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev burn tokens. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given tokenId.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/extensions/ERC1155/IERC1155CreatorExtensionApproveTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Implement this if you want your extension to approve a transfer\\n */\\ninterface IERC1155CreatorExtensionApproveTransfer is IERC165 {\\n\\n    /**\\n     * @dev Set whether or not the creator contract will check the extension for approval of token transfer\\n     */\\n    function setApproveTransfer(address creator, bool enabled) external;\\n\\n    /**\\n     * @dev Called by creator contract to approve a transfer\\n     */\\n    function approveTransfer(address operator, address from, address to, uint256[] calldata tokenIds, uint256[] calldata amounts) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/extensions/ERC1155/IERC1155CreatorExtensionBurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Your extension is required to implement this interface if it wishes\\n * to receive the onBurn callback whenever a token the extension created is\\n * burned\\n */\\ninterface IERC1155CreatorExtensionBurnable is IERC165 {\\n    /**\\n     * @dev callback handler for burn events\\n     */\\n    function onBurn(address owner, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n}\"\r\n    },\r\n    \"contracts/extensions/ICreatorExtensionRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable royalties\\n */\\ninterface ICreatorExtensionRoyalties is IERC165 {\\n\\n    /**\\n     * Get the royalties for a given creator/tokenId\\n     */\\n    function getRoyalties(address creator, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/permissions/ERC1155/IERC1155CreatorMintPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155Creator compliant extension contracts.\\n */\\ninterface IERC1155CreatorMintPermissions is IERC165 {\\n\\n    /**\\n     * @dev get approval to mint\\n     */\\n    function approveMint(address extension, address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n}\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControlUpgradeable is OwnableUpgradeable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}"
  },
  "contractNames": {
    "0xE7d3982E214F9DFD53d23a7f72851a7044072250": "ERC1155LazyPayableClaim",
    "0x2aca032684ec714210b91abf7bb9df0a3f2ee84b": "SCHMR",
    "0x6bf5ed59de0e19999d264746843ff931c0133090": "ERC1155CreatorImplementation"
  },
  "abis": {
    "0xE7d3982E214F9DFD53d23a7f72851a7044072250": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegationRegistry",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "AdminApproved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "AdminRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "initializer",
            "type": "address"
          }
        ],
        "name": "ClaimInitialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          }
        ],
        "name": "ClaimMint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint16",
            "name": "mintCount",
            "type": "uint16"
          }
        ],
        "name": "ClaimMintBatch",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint16",
            "name": "mintCount",
            "type": "uint16"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "proxy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "mintFor",
            "type": "address"
          }
        ],
        "name": "ClaimMintProxy",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          }
        ],
        "name": "ClaimUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "DELEGATION_REGISTRY",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MEMBERSHIP_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MINT_FEE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MINT_FEE_MERKLE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "proxyAddresses",
            "type": "address[]"
          }
        ],
        "name": "addMintProxyAddresses",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "recipients",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "name": "airdrop",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "approveAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "uint32",
            "name": "mintIndex",
            "type": "uint32"
          }
        ],
        "name": "checkMintIndex",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "uint32[]",
            "name": "mintIndices",
            "type": "uint32[]"
          }
        ],
        "name": "checkMintIndices",
        "outputs": [
          {
            "internalType": "bool[]",
            "name": "minted",
            "type": "bool[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getAdmins",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "admins",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          }
        ],
        "name": "getClaim",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint32",
                "name": "total",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "totalMax",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "walletMax",
                "type": "uint32"
              },
              {
                "internalType": "uint48",
                "name": "startDate",
                "type": "uint48"
              },
              {
                "internalType": "uint48",
                "name": "endDate",
                "type": "uint48"
              },
              {
                "internalType": "enum ILazyPayableClaim.StorageProtocol",
                "name": "storageProtocol",
                "type": "uint8"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              },
              {
                "internalType": "string",
                "name": "location",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "cost",
                "type": "uint256"
              },
              {
                "internalType": "address payable",
                "name": "paymentReceiver",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "erc20",
                "type": "address"
              }
            ],
            "internalType": "struct IERC1155LazyPayableClaim.Claim",
            "name": "claim",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "minter",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          }
        ],
        "name": "getTotalMints",
        "outputs": [
          {
            "internalType": "uint32",
            "name": "",
            "type": "uint32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint32",
                "name": "totalMax",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "walletMax",
                "type": "uint32"
              },
              {
                "internalType": "uint48",
                "name": "startDate",
                "type": "uint48"
              },
              {
                "internalType": "uint48",
                "name": "endDate",
                "type": "uint48"
              },
              {
                "internalType": "enum ILazyPayableClaim.StorageProtocol",
                "name": "storageProtocol",
                "type": "uint8"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              },
              {
                "internalType": "string",
                "name": "location",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "cost",
                "type": "uint256"
              },
              {
                "internalType": "address payable",
                "name": "paymentReceiver",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "erc20",
                "type": "address"
              }
            ],
            "internalType": "struct IERC1155LazyPayableClaim.ClaimParameters",
            "name": "claimParameters",
            "type": "tuple"
          }
        ],
        "name": "initializeClaim",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "isAdmin",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "uint32",
            "name": "mintIndex",
            "type": "uint32"
          },
          {
            "internalType": "bytes32[]",
            "name": "merkleProof",
            "type": "bytes32[]"
          },
          {
            "internalType": "address",
            "name": "mintFor",
            "type": "address"
          }
        ],
        "name": "mint",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "uint16",
            "name": "mintCount",
            "type": "uint16"
          },
          {
            "internalType": "uint32[]",
            "name": "mintIndices",
            "type": "uint32[]"
          },
          {
            "internalType": "bytes32[][]",
            "name": "merkleProofs",
            "type": "bytes32[][]"
          },
          {
            "internalType": "address",
            "name": "mintFor",
            "type": "address"
          }
        ],
        "name": "mintBatch",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "uint16",
            "name": "mintCount",
            "type": "uint16"
          },
          {
            "internalType": "uint32[]",
            "name": "mintIndices",
            "type": "uint32[]"
          },
          {
            "internalType": "bytes32[][]",
            "name": "merkleProofs",
            "type": "bytes32[][]"
          },
          {
            "internalType": "address",
            "name": "mintFor",
            "type": "address"
          }
        ],
        "name": "mintProxy",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "proxyAddresses",
            "type": "address[]"
          }
        ],
        "name": "removeMintProxyAddresses",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "revokeAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "membershipAddress",
            "type": "address"
          }
        ],
        "name": "setMembershipAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "uri",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint32",
                "name": "totalMax",
                "type": "uint32"
              },
              {
                "internalType": "uint32",
                "name": "walletMax",
                "type": "uint32"
              },
              {
                "internalType": "uint48",
                "name": "startDate",
                "type": "uint48"
              },
              {
                "internalType": "uint48",
                "name": "endDate",
                "type": "uint48"
              },
              {
                "internalType": "enum ILazyPayableClaim.StorageProtocol",
                "name": "storageProtocol",
                "type": "uint8"
              },
              {
                "internalType": "bytes32",
                "name": "merkleRoot",
                "type": "bytes32"
              },
              {
                "internalType": "string",
                "name": "location",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "cost",
                "type": "uint256"
              },
              {
                "internalType": "address payable",
                "name": "paymentReceiver",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "erc20",
                "type": "address"
              }
            ],
            "internalType": "struct IERC1155LazyPayableClaim.ClaimParameters",
            "name": "claimParameters",
            "type": "tuple"
          }
        ],
        "name": "updateClaim",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContractAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "claimIndex",
            "type": "uint256"
          },
          {
            "internalType": "enum ILazyPayableClaim.StorageProtocol",
            "name": "storageProtocol",
            "type": "uint8"
          },
          {
            "internalType": "string",
            "name": "location",
            "type": "string"
          }
        ],
        "name": "updateTokenURIParams",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address payable",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "0x2aca032684ec714210b91abf7bb9df0a3f2ee84b": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [],
        "name": "implementation",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "0x6bf5ed59de0e19999d264746843ff931c0133090": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "AdminApproved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "AdminRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          }
        ],
        "name": "ApproveTransferUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address payable[]",
            "name": "receivers",
            "type": "address[]"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "basisPoints",
            "type": "uint256[]"
          }
        ],
        "name": "DefaultRoyaltiesUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "ExtensionApproveTransferUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "ExtensionBlacklisted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "ExtensionRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address payable[]",
            "name": "receivers",
            "type": "address[]"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "basisPoints",
            "type": "uint256[]"
          }
        ],
        "name": "ExtensionRoyaltiesUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "ExtensionUnregistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "version",
            "type": "uint8"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "permissions",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "MintPermissionsUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address payable[]",
            "name": "receivers",
            "type": "address[]"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "basisPoints",
            "type": "uint256[]"
          }
        ],
        "name": "RoyaltiesUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "values",
            "type": "uint256[]"
          }
        ],
        "name": "TransferBatch",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "TransferSingle",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "value",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "URI",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "VERSION",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "approveAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "accounts",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          }
        ],
        "name": "balanceOfBatch",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          }
        ],
        "name": "blacklistExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "name": "burn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getAdmins",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "admins",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getApproveTransfer",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getExtensions",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "extensions",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getFeeBps",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getFeeRecipients",
        "outputs": [
          {
            "internalType": "address payable[]",
            "name": "",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getFees",
        "outputs": [
          {
            "internalType": "address payable[]",
            "name": "",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getRoyalties",
        "outputs": [
          {
            "internalType": "address payable[]",
            "name": "",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "isAdmin",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "to",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "name": "mintBaseExisting",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "to",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "uris",
            "type": "string[]"
          }
        ],
        "name": "mintBaseNew",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "to",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "name": "mintExtensionExisting",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "to",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "uris",
            "type": "string[]"
          }
        ],
        "name": "mintExtensionNew",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "baseURI",
            "type": "string"
          }
        ],
        "name": "registerExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "baseURI",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "baseURIIdentical",
            "type": "bool"
          }
        ],
        "name": "registerExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "name": "revokeAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "royaltyInfo",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "safeBatchTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          }
        ],
        "name": "setApproveTransfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setApproveTransferExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "uri_",
            "type": "string"
          }
        ],
        "name": "setBaseTokenURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "uri_",
            "type": "string"
          }
        ],
        "name": "setBaseTokenURIExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "uri_",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "identical",
            "type": "bool"
          }
        ],
        "name": "setBaseTokenURIExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "permissions",
            "type": "address"
          }
        ],
        "name": "setMintPermissions",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address payable[]",
            "name": "receivers",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "basisPoints",
            "type": "uint256[]"
          }
        ],
        "name": "setRoyalties",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address payable[]",
            "name": "receivers",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "basisPoints",
            "type": "uint256[]"
          }
        ],
        "name": "setRoyalties",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          },
          {
            "internalType": "address payable[]",
            "name": "receivers",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "basisPoints",
            "type": "uint256[]"
          }
        ],
        "name": "setRoyaltiesExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "uri_",
            "type": "string"
          }
        ],
        "name": "setTokenURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "uris",
            "type": "string[]"
          }
        ],
        "name": "setTokenURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "uris",
            "type": "string[]"
          }
        ],
        "name": "setTokenURIExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "uri_",
            "type": "string"
          }
        ],
        "name": "setTokenURIExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "prefix",
            "type": "string"
          }
        ],
        "name": "setTokenURIPrefix",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "prefix",
            "type": "string"
          }
        ],
        "name": "setTokenURIPrefixExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenExtension",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "extension",
            "type": "address"
          }
        ],
        "name": "unregisterExtension",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "uri",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ]
  }
}