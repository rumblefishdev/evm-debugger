{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YDF.sol\": {\r\n      \"content\": \"/******************************************************************************************************\\nYieldification (YDF)\\n\\nWebsite: https://yieldification.com\\nTwitter: https://twitter.com/yieldification\\nTelegram: https://t.me/yieldification\\n******************************************************************************************************/\\n\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IYDF.sol';\\nimport './sYDF.sol';\\nimport './slYDF.sol';\\nimport './YDFVester.sol';\\nimport './StakeRewards.sol';\\n\\ncontract YDF is IYDF, ERC20, Ownable {\\n  uint256 private constant EARLY_SELL_EXPIRATION = 90 days;\\n  uint256 private constant SET_AND_LOCK_TAXES = 30 days;\\n  uint256 private constant LAUNCH_MAX_TXN_PERIOD = 30 minutes;\\n\\n  // at launch, a higher marketing+rewards tax will support initial capital generated\\n  // for hiring and paying for an initial marketing blitz. After 30 days the contract\\n  // reduces the marketing percent to 1%, which it can no longer be adjusted.\\n  uint256 public taxMarketingPerc = 300; // 3%\\n  uint256 public taxRewardsPerc = 200; // 2%\\n  uint256 public taxEarlyPerc = 1000; // 10%\\n\\n  sYDF private _stakedYDF;\\n  slYDF private _stakedYDFLP;\\n  YDFVester private _vester;\\n  StakeRewards private _rewards;\\n\\n  address public treasury;\\n  uint256 public launchBlock;\\n  uint256 public launchTime;\\n\\n  mapping(address => bool) public isTaxExcluded;\\n\\n  IUniswapV2Router02 public uniswapV2Router;\\n  address public uniswapV2Pair;\\n  mapping(address => bool) public mmPairs; // market making pairs\\n\\n  // the following are used to track logic for the time-decaying sell tax.\\n  // buyTracker and sellTracker will be appended to each buy/sell respectively,\\n  // where as lastBuyTimestamp is reset each buy. As long as the buyTracker\\n  // exceeds the sellTracker, the decaying sell tax will reduce continuously\\n  // against the lastBuyTimestamp, but at the moment the user sells and\\n  // the sellTracker exceeds the buyTracker, all are reset which will mean\\n  // the sell tax will be no longer decaying for this wallet until the wallet\\n  // buys again and everything starts from scratch again.\\n  //\\n  // IMPORTANT: the time-decay tax is measured against lastBuyTimestamp, meaning\\n  // each time a wallet buys, their time decay is reset back to the beginning.\\n  mapping(address => uint256) public buyTracker;\\n  mapping(address => uint256) public lastBuyTimestamp;\\n  mapping(address => uint256) public sellTracker;\\n\\n  mapping(address => bool) private _isBot;\\n\\n  bool private _swapping = false;\\n  bool private _swapEnabled = true;\\n\\n  modifier onlyStake() {\\n    require(\\n      address(_stakedYDF) == _msgSender() ||\\n        address(_stakedYDFLP) == _msgSender(),\\n      'not a staking contract'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyVest() {\\n    require(address(_vester) == _msgSender(), 'not vesting contract');\\n    _;\\n  }\\n\\n  modifier swapLock() {\\n    _swapping = true;\\n    _;\\n    _swapping = false;\\n  }\\n\\n  event SetMarketMakingPair(address indexed pair, bool isPair);\\n  event SetTreasury(address indexed newTreasury);\\n  event StakeMintToVester(uint256 amount);\\n  event Burn(address indexed user, uint256 amount);\\n  event ResetBuySellMetadata(address indexed user);\\n  event SetTaxExclusion(address indexed user, bool isExcluded);\\n\\n  constructor() ERC20('Yieldification', 'YDF') {\\n    _mint(msg.sender, 696_900_000 * 10**18);\\n\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n      0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    );\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n      address(this),\\n      _uniswapV2Router.WETH()\\n    );\\n\\n    _vester = new YDFVester(address(this));\\n    _rewards = new StakeRewards(address(this), address(_uniswapV2Router));\\n\\n    _stakedYDF = new sYDF(\\n      address(this),\\n      address(_vester),\\n      address(_rewards),\\n      'https://api.yieldification.com/sydf/metadata/'\\n    );\\n    _stakedYDF.setPaymentAddress(msg.sender);\\n    _stakedYDF.setRoyaltyAddress(msg.sender);\\n    _stakedYDF.transferOwnership(msg.sender);\\n\\n    _stakedYDFLP = new slYDF(\\n      uniswapV2Pair,\\n      address(_uniswapV2Router),\\n      address(this),\\n      address(_vester),\\n      address(_rewards),\\n      'https://api.yieldification.com/slydf/metadata/'\\n    );\\n    _stakedYDFLP.setPaymentAddress(msg.sender);\\n    _stakedYDFLP.setRoyaltyAddress(msg.sender);\\n    _stakedYDFLP.transferOwnership(msg.sender);\\n\\n    _vester.addStakingContract(address(_stakedYDF));\\n    _vester.addStakingContract(address(_stakedYDFLP));\\n    _vester.transferOwnership(msg.sender);\\n\\n    _rewards.setsYDF(address(_stakedYDF));\\n    _rewards.setslYDF(address(_stakedYDFLP));\\n    _rewards.transferOwnership(msg.sender);\\n\\n    mmPairs[uniswapV2Pair] = true;\\n    uniswapV2Router = _uniswapV2Router;\\n    treasury = msg.sender;\\n\\n    isTaxExcluded[address(this)] = true;\\n    isTaxExcluded[address(_stakedYDFLP)] = true; // allow zapping without taxes\\n    isTaxExcluded[msg.sender] = true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual override {\\n    bool _isBuy = mmPairs[sender] && recipient != address(uniswapV2Router);\\n    bool _isSell = mmPairs[recipient];\\n\\n    if (_isBuy) {\\n      require(launchBlock > 0, 'not launched yet');\\n\\n      buyTracker[recipient] += amount;\\n      lastBuyTimestamp[recipient] = block.timestamp;\\n      if (block.number <= launchBlock + 2) {\\n        _isBot[recipient] = true;\\n      } else if (block.timestamp < launchTime + LAUNCH_MAX_TXN_PERIOD) {\\n        require(\\n          balanceOf(recipient) + amount <= (totalSupply() * 1) / 100,\\n          'at launch max wallet is up to 1% supply'\\n        );\\n      }\\n    } else {\\n      require(!_isBot[recipient], 'sorry bot');\\n      require(!_isBot[sender], 'sorry bot');\\n      require(!_isBot[_msgSender()], 'sorry bot');\\n    }\\n\\n    uint256 contractBalance = balanceOf(address(this));\\n    uint256 _swapAmount = (balanceOf(uniswapV2Pair) * 5) / 1000; // 0.5% pair balance\\n    bool _overMinimum = contractBalance >= _swapAmount && _swapAmount > 0;\\n    if (!_swapping && _swapEnabled && _overMinimum && sender != uniswapV2Pair) {\\n      _swapForETH(_swapAmount);\\n    }\\n\\n    uint256 tax = 0;\\n    if (_isSell && !(isTaxExcluded[sender] || isTaxExcluded[recipient])) {\\n      // at the expiration date we will reset taxes which will\\n      // set them forever in the contract to no longer be changed\\n      if (\\n        block.timestamp > launchTime + SET_AND_LOCK_TAXES &&\\n        taxMarketingPerc > 100\\n      ) {\\n        taxMarketingPerc = 100; // 1%\\n        taxRewardsPerc = 100; // 1%\\n        taxEarlyPerc = 1300; // 13%\\n      }\\n\\n      uint256 _taxEarlyPerc = getSellEarlyTax(sender, amount, taxEarlyPerc);\\n      uint256 _totalTax = taxMarketingPerc + taxRewardsPerc + _taxEarlyPerc;\\n      tax = (amount * _totalTax) / 10000;\\n      if (tax > 0) {\\n        uint256 _taxAmountETH = (tax * (taxMarketingPerc + taxRewardsPerc)) /\\n          _totalTax;\\n        super._transfer(sender, address(this), _taxAmountETH);\\n        if (_taxEarlyPerc > 0) {\\n          _burnWithEvent(sender, tax - _taxAmountETH);\\n        }\\n      }\\n      sellTracker[sender] += amount;\\n    }\\n\\n    super._transfer(sender, recipient, amount - tax);\\n\\n    // if the sell tracker equals or exceeds the amount of tokens bought,\\n    // reset all variables here which resets the time-decaying sell tax logic.\\n    if (sellTracker[sender] >= buyTracker[sender]) {\\n      _resetBuySellMetadata(sender);\\n    }\\n    // handles transferring to a fresh wallet or wallet that hasn't bought YDF before\\n    if (lastBuyTimestamp[recipient] == 0) {\\n      _resetBuySellMetadata(recipient);\\n    }\\n  }\\n\\n  function _swapForETH(uint256 _amountToSwap) private swapLock {\\n    uint256 _balBefore = address(this).balance;\\n\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n\\n    _approve(address(this), address(uniswapV2Router), _amountToSwap);\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      _amountToSwap,\\n      0,\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    uint256 _balToProcess = address(this).balance - _balBefore;\\n    if (_balToProcess > 0) {\\n      uint256 _totalTaxETH = taxMarketingPerc + taxRewardsPerc;\\n\\n      // send marketing ETH\\n      uint256 _marketingETH = (_balToProcess * taxMarketingPerc) / _totalTaxETH;\\n      address _treasury = treasury == address(0) ? owner() : treasury;\\n      if (_marketingETH > 0) {\\n        payable(_treasury).call{ value: _marketingETH }('');\\n      }\\n\\n      // deposit rewards into rewards pool\\n      uint256 _rewardsETH = _balToProcess - _marketingETH;\\n      if (_rewardsETH > 0) {\\n        if (_rewards.totalSharesDeposited() > 0) {\\n          _rewards.depositRewards{ value: _rewardsETH }();\\n        } else {\\n          payable(_treasury).call{ value: _rewardsETH }('');\\n        }\\n      }\\n    }\\n  }\\n\\n  function getSellEarlyTax(\\n    address _seller,\\n    uint256 _sellAmount,\\n    uint256 _tax\\n  ) public view returns (uint256) {\\n    if (lastBuyTimestamp[_seller] == 0) {\\n      return _tax;\\n    }\\n\\n    if (sellTracker[_seller] + _sellAmount > buyTracker[_seller]) {\\n      return _tax;\\n    }\\n\\n    if (block.timestamp > getSellEarlyExpiration(_seller)) {\\n      return 0;\\n    }\\n    uint256 _secondsAfterBuy = block.timestamp - lastBuyTimestamp[_seller];\\n    return\\n      (_tax * (EARLY_SELL_EXPIRATION - _secondsAfterBuy)) /\\n      EARLY_SELL_EXPIRATION;\\n  }\\n\\n  function getSellEarlyExpiration(address _seller)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      lastBuyTimestamp[_seller] == 0\\n        ? 0\\n        : lastBuyTimestamp[_seller] + EARLY_SELL_EXPIRATION;\\n  }\\n\\n  function getStakedYDF() external view returns (address) {\\n    return address(_stakedYDF);\\n  }\\n\\n  function getStakedYDFLP() external view returns (address) {\\n    return address(_stakedYDFLP);\\n  }\\n\\n  function getVester() external view returns (address) {\\n    return address(_vester);\\n  }\\n\\n  function getRewards() external view returns (address) {\\n    return address(_rewards);\\n  }\\n\\n  function addToBuyTracker(address _user, uint256 _amount) external onlyVest {\\n    buyTracker[_user] += _amount;\\n    // if this user hasn't bought before, but is vesting from unstaking an\\n    // acquired stake NFT, go ahead and set their buy timetstamp here from now\\n    if (lastBuyTimestamp[_user] == 0) {\\n      lastBuyTimestamp[_user] = block.timestamp;\\n    }\\n  }\\n\\n  function resetBuySellMetadata() external {\\n    _resetBuySellMetadata(msg.sender);\\n    emit ResetBuySellMetadata(msg.sender);\\n  }\\n\\n  function _resetBuySellMetadata(address _user) internal {\\n    buyTracker[_user] = balanceOf(_user);\\n    lastBuyTimestamp[_user] = block.timestamp;\\n    sellTracker[_user] = 0;\\n  }\\n\\n  function stakeMintToVester(uint256 _amount) external override onlyStake {\\n    _mint(address(_vester), _amount);\\n    emit StakeMintToVester(_amount);\\n  }\\n\\n  function burn(uint256 _amount) external {\\n    _burnWithEvent(msg.sender, _amount);\\n  }\\n\\n  function _burnWithEvent(address _user, uint256 _amount) internal {\\n    _burn(_user, _amount);\\n    emit Burn(_user, _amount);\\n  }\\n\\n  function setIsTaxExcluded(address _wallet, bool _isExcluded)\\n    external\\n    onlyOwner\\n  {\\n    isTaxExcluded[_wallet] = _isExcluded;\\n    emit SetTaxExclusion(_wallet, _isExcluded);\\n  }\\n\\n  function setMarketMakingPair(address _addy, bool _isPair) external onlyOwner {\\n    require(_addy != uniswapV2Pair, 'cannot change state of built-in pair');\\n    mmPairs[_addy] = _isPair;\\n    emit SetMarketMakingPair(_addy, _isPair);\\n  }\\n\\n  function setSwapEnabled(bool _enabled) external onlyOwner {\\n    _swapEnabled = _enabled;\\n  }\\n\\n  function setTreasury(address _treasury) external onlyOwner {\\n    treasury = _treasury;\\n    emit SetTreasury(_treasury);\\n  }\\n\\n  function startTrading() external onlyOwner {\\n    require(launchBlock == 0, 'already launched');\\n    launchBlock = block.number;\\n    launchTime = block.timestamp;\\n  }\\n\\n  function withdrawETH() external onlyOwner {\\n    payable(owner()).call{ value: address(this).balance }('');\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYDF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n * @dev YDF token interface\\n */\\n\\ninterface IYDF is IERC20 {\\n  function addToBuyTracker(address _user, uint256 _amount) external;\\n\\n  function burn(uint256 _amount) external;\\n\\n  function stakeMintToVester(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/sYDF.sol\": {\r\n      \"content\": \"/******************************************************************************************************\\nStaked Yieldification (sYDF)\\n\\nWebsite: https://yieldification.com\\nTwitter: https://twitter.com/yieldification\\nTelegram: https://t.me/yieldification\\n******************************************************************************************************/\\n\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport './YDFStake.sol';\\n\\ncontract sYDF is YDFStake {\\n  constructor(\\n    address _ydf,\\n    address _vester,\\n    address _rewards,\\n    string memory _baseTokenURI\\n  )\\n    YDFStake(\\n      'Staked Yieldification',\\n      'sYDF',\\n      _ydf,\\n      _ydf,\\n      _vester,\\n      _rewards,\\n      _baseTokenURI\\n    )\\n  {\\n    _addAprLockOption(2500, 0);\\n    _addAprLockOption(5000, 14 days);\\n    _addAprLockOption(10000, 120 days);\\n    _addAprLockOption(15000, 240 days);\\n    _addAprLockOption(20000, 360 days);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/slYDF.sol\": {\r\n      \"content\": \"/******************************************************************************************************\\nStaked Yieldification Liquidity (slYDF)\\n\\nWebsite: https://yieldification.com\\nTwitter: https://twitter.com/yieldification\\nTelegram: https://t.me/yieldification\\n******************************************************************************************************/\\n\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport './YDFStake.sol';\\n\\ncontract slYDF is YDFStake {\\n  address private _uniswapRouter;\\n  uint8 public zapBuySlippage = 2; // 2%\\n  uint8 public zapSellSlippage = 25; // 25%\\n\\n  event StakeLiquidity(address indexed user, uint256 amountUniLPStaked);\\n  event ZapETHOnly(\\n    address indexed user,\\n    uint256 amountETH,\\n    uint256 amountUniLPStaked\\n  );\\n  event ZapYDFOnly(\\n    address indexed user,\\n    uint256 amountYDF,\\n    uint256 amountUniLPStaked\\n  );\\n  event ZapETHAndYDF(\\n    address indexed user,\\n    uint256 amountETH,\\n    uint256 amountYDF,\\n    uint256 amountUniLPStaked\\n  );\\n\\n  constructor(\\n    address _pair,\\n    address _router,\\n    address _ydf,\\n    address _vester,\\n    address _rewards,\\n    string memory _baseTokenURI\\n  )\\n    YDFStake(\\n      'Staked Yieldification Liquidity',\\n      'slYDF',\\n      _pair,\\n      _ydf,\\n      _vester,\\n      _rewards,\\n      _baseTokenURI\\n    )\\n  {\\n    _uniswapRouter = _router;\\n    _addAprLockOption(5000, 0);\\n    _addAprLockOption(7500, 14 days);\\n    _addAprLockOption(15000, 120 days);\\n    _addAprLockOption(22500, 240 days);\\n    _addAprLockOption(30000, 360 days);\\n  }\\n\\n  function stake(uint256 _amount, uint256 _lockOptIndex) external override {\\n    _stakeLp(msg.sender, _amount, _lockOptIndex, true);\\n    emit StakeLiquidity(msg.sender, _amount);\\n  }\\n\\n  function zapAndStakeETHOnly(uint256 _lockOptIndex) external payable {\\n    require(msg.value > 0, 'need to provide ETH to zap');\\n\\n    uint256 _ethBalBefore = address(this).balance - msg.value;\\n    uint256 _ydfBalanceBefore = ydf.balanceOf(address(this));\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_uniswapRouter);\\n\\n    // swap half the ETH for YDF\\n    uint256 _tokensToReceiveNoSlip = _getTokensToReceiveOnBuyNoSlippage(\\n      msg.value / 2\\n    );\\n    address[] memory path = new address[](2);\\n    path[0] = _uniswapV2Router.WETH();\\n    path[1] = address(ydf);\\n    _uniswapV2Router.swapExactETHForTokens{ value: msg.value / 2 }(\\n      (_tokensToReceiveNoSlip * (100 - zapBuySlippage)) / 100, // handle slippage\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    uint256 _lpBalBefore = stakeToken.balanceOf(address(this));\\n    _addLp(ydf.balanceOf(address(this)) - _ydfBalanceBefore, msg.value / 2);\\n    uint256 _lpBalanceToStake = stakeToken.balanceOf(address(this)) -\\n      _lpBalBefore;\\n    _stakeLp(msg.sender, _lpBalanceToStake, _lockOptIndex, false);\\n\\n    _returnExcessETH(msg.sender, _ethBalBefore);\\n    _returnExcessYDF(msg.sender, _ydfBalanceBefore);\\n\\n    emit ZapETHOnly(msg.sender, msg.value, _lpBalanceToStake);\\n  }\\n\\n  function zapAndStakeETHAndYDF(uint256 _amountYDF, uint256 _lockOptIndex)\\n    external\\n    payable\\n  {\\n    require(msg.value > 0, 'need to provide ETH to zap');\\n\\n    uint256 _ethBalBefore = address(this).balance - msg.value;\\n    uint256 _ydfBalBefore = ydf.balanceOf(address(this));\\n    ydf.transferFrom(msg.sender, address(this), _amountYDF);\\n    uint256 _ydfToProcess = ydf.balanceOf(address(this)) - _ydfBalBefore;\\n\\n    uint256 _lpBalBefore = stakeToken.balanceOf(address(this));\\n    _addLp(_ydfToProcess, msg.value);\\n    uint256 _lpBalanceToStake = stakeToken.balanceOf(address(this)) -\\n      _lpBalBefore;\\n    _stakeLp(msg.sender, _lpBalanceToStake, _lockOptIndex, false);\\n\\n    _returnExcessETH(msg.sender, _ethBalBefore);\\n    _returnExcessYDF(msg.sender, _ydfBalBefore);\\n\\n    emit ZapETHAndYDF(msg.sender, msg.value, _amountYDF, _lpBalanceToStake);\\n  }\\n\\n  function zapAndStakeYDFOnly(uint256 _amountYDF, uint256 _lockOptIndex)\\n    external\\n  {\\n    require(\\n      _aprLockOptions[_lockOptIndex].lockTime > 0,\\n      'cannot zap and stake YDF only without lockup period'\\n    );\\n    uint256 _ethBalBefore = address(this).balance;\\n    uint256 _ydfBalBefore = ydf.balanceOf(address(this));\\n    ydf.transferFrom(msg.sender, address(this), _amountYDF);\\n    uint256 _ydfToProcess = ydf.balanceOf(address(this)) - _ydfBalBefore;\\n\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_uniswapRouter);\\n\\n    // swap half the YDF for ETH\\n    uint256 _ethToReceiveNoSlip = _getETHToReceiveOnSellNoSlippage(\\n      _ydfToProcess / 2\\n    );\\n    address[] memory path = new address[](2);\\n    path[0] = address(ydf);\\n    path[1] = _uniswapV2Router.WETH();\\n    ydf.approve(address(_uniswapV2Router), _ydfToProcess / 2);\\n    _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      _ydfToProcess / 2,\\n      (_ethToReceiveNoSlip * (100 - zapSellSlippage)) / 100, // handle slippage\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    uint256 _lpBalBefore = stakeToken.balanceOf(address(this));\\n    _addLp(_ydfToProcess / 2, address(this).balance - _ethBalBefore);\\n    uint256 _lpBalanceToStake = stakeToken.balanceOf(address(this)) -\\n      _lpBalBefore;\\n    _stakeLp(msg.sender, _lpBalanceToStake, _lockOptIndex, false);\\n\\n    _returnExcessETH(msg.sender, _ethBalBefore);\\n    _returnExcessYDF(msg.sender, _ydfBalBefore);\\n\\n    emit ZapYDFOnly(msg.sender, _amountYDF, _lpBalanceToStake);\\n  }\\n\\n  function _addLp(uint256 tokenAmount, uint256 ethAmount) private {\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_uniswapRouter);\\n    ydf.approve(address(_uniswapV2Router), tokenAmount);\\n    _uniswapV2Router.addLiquidityETH{ value: ethAmount }(\\n      address(ydf),\\n      tokenAmount,\\n      0,\\n      0,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function _getTokensToReceiveOnBuyNoSlippage(uint256 _amountETH)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    IUniswapV2Pair pair = IUniswapV2Pair(address(stakeToken));\\n    (uint112 _r0, uint112 _r1, ) = pair.getReserves();\\n    if (pair.token0() == IUniswapV2Router02(_uniswapRouter).WETH()) {\\n      return (_amountETH * _r1) / _r0;\\n    } else {\\n      return (_amountETH * _r0) / _r1;\\n    }\\n  }\\n\\n  function _getETHToReceiveOnSellNoSlippage(uint256 _amountYDF)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    IUniswapV2Pair pair = IUniswapV2Pair(address(stakeToken));\\n    (uint112 _r0, uint112 _r1, ) = pair.getReserves();\\n    if (pair.token0() == IUniswapV2Router02(_uniswapRouter).WETH()) {\\n      return (_amountYDF * _r0) / _r1;\\n    } else {\\n      return (_amountYDF * _r1) / _r0;\\n    }\\n  }\\n\\n  function _stakeLp(\\n    address _user,\\n    uint256 _amountStakeToken,\\n    uint256 _lockOptIndex,\\n    bool _transferStakeToken\\n  ) internal {\\n    IUniswapV2Pair pair = IUniswapV2Pair(address(stakeToken));\\n    _amountStakeToken = _amountStakeToken == 0\\n      ? pair.balanceOf(_user)\\n      : _amountStakeToken;\\n    (uint112 res0, uint112 res1, ) = pair.getReserves();\\n    address t0 = pair.token0();\\n    uint256 ydfReserves = t0 == address(ydf) ? res0 : res1;\\n    uint256 singleSideTokenAmount = (_amountStakeToken * ydfReserves) /\\n      stakeToken.totalSupply();\\n\\n    // need to multiply the earned amount by 2 since when providing LP\\n    // the user provides both sides of the pair, so we account for both\\n    // sides of the pair by multiplying by 2\\n    _stake(\\n      _user,\\n      _amountStakeToken,\\n      singleSideTokenAmount * 2,\\n      _lockOptIndex,\\n      _transferStakeToken\\n    );\\n  }\\n\\n  function _returnExcessETH(address _user, uint256 _initialBal) internal {\\n    if (address(this).balance > _initialBal) {\\n      payable(_user).call{ value: address(this).balance - _initialBal }('');\\n      require(address(this).balance >= _initialBal, 'took too much');\\n    }\\n  }\\n\\n  function _returnExcessYDF(address _user, uint256 _initialBal) internal {\\n    uint256 _currentBal = ydf.balanceOf(address(this));\\n    if (_currentBal > _initialBal) {\\n      ydf.transfer(_user, _currentBal - _initialBal);\\n      require(ydf.balanceOf(address(this)) >= _initialBal, 'took too much');\\n    }\\n  }\\n\\n  function setZapBuySlippage(uint8 _slippage) external onlyOwner {\\n    require(_slippage <= 100, 'cannot be more than 100% slippage');\\n    zapBuySlippage = _slippage;\\n  }\\n\\n  function setZapSellSlippage(uint8 _slippage) external onlyOwner {\\n    require(_slippage <= 100, 'cannot be more than 100% slippage');\\n    zapSellSlippage = _slippage;\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/YDFVester.sol\": {\r\n      \"content\": \"/******************************************************************************************************\\nYieldification Vesting Contract\\n\\nWebsite: https://yieldification.com\\nTwitter: https://twitter.com/yieldification\\nTelegram: https://t.me/yieldification\\n******************************************************************************************************/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IYDF.sol';\\n\\ncontract YDFVester is Ownable {\\n  IYDF private _ydf;\\n\\n  uint256 public fullyVestedPeriod = 90 days;\\n  uint256 public withdrawsPerPeriod = 10;\\n\\n  struct TokenVest {\\n    uint256 start;\\n    uint256 end;\\n    uint256 totalWithdraws;\\n    uint256 withdrawsCompleted;\\n    uint256 amount;\\n  }\\n  mapping(address => TokenVest[]) public vests;\\n  address[] public stakeContracts;\\n\\n  event CreateVest(address indexed user, uint256 amount);\\n  event Withdraw(address indexed user, uint256 index, uint256 amountWithdrawn);\\n\\n  modifier onlyStake() {\\n    bool isStake;\\n    for (uint256 i = 0; i < stakeContracts.length; i++) {\\n      if (msg.sender == stakeContracts[i]) {\\n        isStake = true;\\n        break;\\n      }\\n    }\\n    require(isStake, 'not a staking contract');\\n    _;\\n  }\\n\\n  constructor(address _token) {\\n    _ydf = IYDF(_token);\\n  }\\n\\n  // we expect the staking contract (re: the owner) to transfer tokens to\\n  // this contract, so no need to transferFrom anywhere\\n  function createVest(address _user, uint256 _amount) external onlyStake {\\n    vests[_user].push(\\n      TokenVest({\\n        start: block.timestamp,\\n        end: block.timestamp + fullyVestedPeriod,\\n        totalWithdraws: withdrawsPerPeriod,\\n        withdrawsCompleted: 0,\\n        amount: _amount\\n      })\\n    );\\n    emit CreateVest(_user, _amount);\\n  }\\n\\n  function withdraw(uint256 _index) external {\\n    address _user = msg.sender;\\n    TokenVest storage _vest = vests[_user][_index];\\n    require(_vest.amount > 0, 'vest does not exist');\\n    require(\\n      _vest.withdrawsCompleted < _vest.totalWithdraws,\\n      'already withdrew all tokens'\\n    );\\n\\n    uint256 _tokensPerWithdrawPeriod = _vest.amount / _vest.totalWithdraws;\\n    uint256 _withdrawsAllowed = getWithdrawsAllowed(_user, _index);\\n\\n    // make sure the calculated allowed amount doesn't exceed total amount for vest\\n    _withdrawsAllowed = _withdrawsAllowed > _vest.totalWithdraws\\n      ? _vest.totalWithdraws\\n      : _withdrawsAllowed;\\n\\n    require(\\n      _vest.withdrawsCompleted < _withdrawsAllowed,\\n      'currently vesting, please wait for next withdrawable time period'\\n    );\\n\\n    uint256 _withdrawsToComplete = _withdrawsAllowed - _vest.withdrawsCompleted;\\n\\n    _vest.withdrawsCompleted = _withdrawsAllowed;\\n    _ydf.transfer(_user, _tokensPerWithdrawPeriod * _withdrawsToComplete);\\n    _ydf.addToBuyTracker(\\n      _user,\\n      _tokensPerWithdrawPeriod * _withdrawsToComplete\\n    );\\n\\n    // clean up/remove vest entry if it's completed\\n    if (_vest.withdrawsCompleted == _vest.totalWithdraws) {\\n      vests[_user][_index] = vests[_user][vests[_user].length - 1];\\n      vests[_user].pop();\\n    }\\n\\n    emit Withdraw(\\n      _user,\\n      _index,\\n      _tokensPerWithdrawPeriod * _withdrawsToComplete\\n    );\\n  }\\n\\n  function getWithdrawsAllowed(address _user, uint256 _index)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    TokenVest memory _vest = vests[_user][_index];\\n    uint256 _secondsPerWithdrawPeriod = (_vest.end - _vest.start) /\\n      _vest.totalWithdraws;\\n    return (block.timestamp - _vest.start) / _secondsPerWithdrawPeriod;\\n  }\\n\\n  function getUserVests(address _user)\\n    external\\n    view\\n    returns (TokenVest[] memory)\\n  {\\n    return vests[_user];\\n  }\\n\\n  function getYDF() external view returns (address) {\\n    return address(_ydf);\\n  }\\n\\n  function addStakingContract(address _contract) external onlyOwner {\\n    stakeContracts.push(_contract);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/StakeRewards.sol\": {\r\n      \"content\": \"/******************************************************************************************************\\nYieldification Staking Rewards\\n\\nWebsite: https://yieldification.com\\nTwitter: https://twitter.com/yieldification\\nTelegram: https://t.me/yieldification\\n******************************************************************************************************/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IStakeRewards.sol';\\n\\ncontract StakeRewards is IStakeRewards, Ownable {\\n  address public ydf;\\n  IERC721 private sYDF;\\n  IERC721 private slYDF;\\n  IUniswapV2Router02 private uniswapV2Router;\\n\\n  uint256 public compoundBuySlippage = 2;\\n\\n  uint256 public totalStakedUsers;\\n  uint256 public totalSharesDeposited;\\n\\n  struct Share {\\n    uint256 amount;\\n    uint256 stakedTime;\\n  }\\n  struct Reward {\\n    uint256 totalExcluded;\\n    uint256 totalRealised;\\n  }\\n  mapping(address => Share) private shares;\\n  mapping(address => Reward) public rewards;\\n\\n  uint256 public totalRewards;\\n  uint256 public totalDistributed;\\n  uint256 public rewardsPerShare;\\n\\n  uint256 private constant ACC_FACTOR = 10**36;\\n\\n  event AddShares(address indexed user, uint256 amount);\\n  event RemoveShares(address indexed user, uint256 amount);\\n  event ClaimReward(address user);\\n  event DistributeReward(address indexed user, uint256 amount);\\n  event DepositRewards(address indexed user, uint256 amountTokens);\\n\\n  modifier onlyToken() {\\n    require(\\n      msg.sender == address(sYDF) || msg.sender == address(slYDF),\\n      'must be stake token'\\n    );\\n    _;\\n  }\\n\\n  constructor(address _ydf, address _dexRouter) {\\n    ydf = _ydf;\\n    uniswapV2Router = IUniswapV2Router02(_dexRouter);\\n  }\\n\\n  function setShare(\\n    address shareholder,\\n    uint256 balanceUpdate,\\n    bool isRemoving\\n  ) external override onlyToken {\\n    if (isRemoving) {\\n      _removeShares(shareholder, balanceUpdate);\\n      emit RemoveShares(shareholder, balanceUpdate);\\n    } else {\\n      _addShares(shareholder, balanceUpdate);\\n      emit AddShares(shareholder, balanceUpdate);\\n    }\\n  }\\n\\n  function _addShares(address shareholder, uint256 amount) private {\\n    if (shares[shareholder].amount > 0) {\\n      _distributeReward(shareholder, false);\\n    }\\n\\n    uint256 sharesBefore = shares[shareholder].amount;\\n\\n    totalSharesDeposited += amount;\\n    shares[shareholder].amount += amount;\\n    shares[shareholder].stakedTime = block.timestamp;\\n    if (sharesBefore == 0 && shares[shareholder].amount > 0) {\\n      totalStakedUsers++;\\n    }\\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\\n      shares[shareholder].amount\\n    );\\n  }\\n\\n  function _removeShares(address shareholder, uint256 amount) private {\\n    require(\\n      shares[shareholder].amount > 0 &&\\n        (amount == 0 || amount <= shares[shareholder].amount),\\n      'you can only unstake if you have some staked'\\n    );\\n    _distributeReward(shareholder, false);\\n\\n    uint256 removeAmount = amount == 0 ? shares[shareholder].amount : amount;\\n\\n    totalSharesDeposited -= removeAmount;\\n    shares[shareholder].amount -= removeAmount;\\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\\n      shares[shareholder].amount\\n    );\\n  }\\n\\n  function depositRewards() external payable override {\\n    uint256 _amount = msg.value;\\n    require(_amount > 0, 'must provide ETH to deposit for rewards');\\n    require(totalSharesDeposited > 0, 'must be shares to distribute rewards');\\n\\n    totalRewards += _amount;\\n    rewardsPerShare += (ACC_FACTOR * _amount) / totalSharesDeposited;\\n    emit DepositRewards(msg.sender, _amount);\\n  }\\n\\n  function _distributeReward(address shareholder, bool compound) internal {\\n    if (shares[shareholder].amount == 0) {\\n      return;\\n    }\\n\\n    uint256 amount = getUnpaid(shareholder);\\n    rewards[shareholder].totalRealised += amount;\\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\\n      shares[shareholder].amount\\n    );\\n\\n    if (amount > 0) {\\n      totalDistributed += amount;\\n      uint256 _balBefore = address(this).balance;\\n      if (compound) {\\n        uint256 _tokensToReceiveNoSlip = _getTokensToReceiveOnBuyNoSlippage(\\n          amount\\n        );\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = ydf;\\n        uniswapV2Router.swapExactETHForTokens{ value: amount }(\\n          (_tokensToReceiveNoSlip * (100 - compoundBuySlippage)) / 100, // handle slippage\\n          path,\\n          shareholder,\\n          block.timestamp\\n        );\\n      } else {\\n        payable(shareholder).call{ value: amount }('');\\n      }\\n      require(address(this).balance >= _balBefore - amount, 'took too much');\\n      emit DistributeReward(shareholder, amount);\\n    }\\n  }\\n\\n  function _getTokensToReceiveOnBuyNoSlippage(uint256 _amountETH)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    address pairAddy = IUniswapV2Factory(uniswapV2Router.factory()).getPair(\\n      uniswapV2Router.WETH(),\\n      ydf\\n    );\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddy);\\n    (uint112 _r0, uint112 _r1, ) = pair.getReserves();\\n    if (pair.token0() == uniswapV2Router.WETH()) {\\n      return (_amountETH * _r1) / _r0;\\n    } else {\\n      return (_amountETH * _r0) / _r1;\\n    }\\n  }\\n\\n  function claimReward(bool _compound) external override {\\n    _distributeReward(msg.sender, _compound);\\n    emit ClaimReward(msg.sender);\\n  }\\n\\n  // returns the unpaid rewards\\n  function getUnpaid(address shareholder) public view returns (uint256) {\\n    if (shares[shareholder].amount == 0) {\\n      return 0;\\n    }\\n\\n    uint256 earnedRewards = getCumulativeRewards(shares[shareholder].amount);\\n    uint256 rewardsExcluded = rewards[shareholder].totalExcluded;\\n    if (earnedRewards <= rewardsExcluded) {\\n      return 0;\\n    }\\n\\n    return earnedRewards - rewardsExcluded;\\n  }\\n\\n  function getCumulativeRewards(uint256 share) internal view returns (uint256) {\\n    return (share * rewardsPerShare) / ACC_FACTOR;\\n  }\\n\\n  function getShares(address user) external view override returns (uint256) {\\n    return shares[user].amount;\\n  }\\n\\n  function getsYDF() external view returns (address) {\\n    return address(sYDF);\\n  }\\n\\n  function getslYDF() external view returns (address) {\\n    return address(slYDF);\\n  }\\n\\n  function setCompoundBuySlippage(uint8 _slippage) external onlyOwner {\\n    require(_slippage <= 100, 'cannot be more than 100% slippage');\\n    compoundBuySlippage = _slippage;\\n  }\\n\\n  function setsYDF(address _sYDF) external onlyOwner {\\n    sYDF = IERC721(_sYDF);\\n  }\\n\\n  function setslYDF(address _slYDF) external onlyOwner {\\n    slYDF = IERC721(_slYDF);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"contracts/YDFStake.sol\": {\r\n      \"content\": \"/******************************************************************************************************\\nYDFStake Inheritable Contract for staking NFTs\\n\\nWebsite: https://yieldification.com\\nTwitter: https://twitter.com/yieldification\\nTelegram: https://t.me/yieldification\\n******************************************************************************************************/\\n\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport './interfaces/IYDF.sol';\\nimport './interfaces/IYDFVester.sol';\\nimport './interfaces/IStakeRewards.sol';\\n\\ncontract YDFStake is ERC721Enumerable, Ownable {\\n  using Strings for uint256;\\n  using Counters for Counters.Counter;\\n\\n  uint256 private constant ONE_YEAR = 365 days;\\n  uint256 private constant ONE_WEEK = 7 days;\\n  uint16 private constant PERCENT_DENOMENATOR = 10000;\\n\\n  IERC20 internal stakeToken;\\n  IYDF internal ydf;\\n  IYDFVester internal vester;\\n  IStakeRewards internal rewards;\\n\\n  struct AprLock {\\n    uint16 apr;\\n    uint256 lockTime;\\n  }\\n  AprLock[] internal _aprLockOptions;\\n\\n  struct Stake {\\n    uint256 created;\\n    uint256 amountStaked;\\n    uint256 amountYDFBaseEarn;\\n    uint16 apr;\\n    uint256 lockTime;\\n  }\\n  // tokenId => Stake\\n  mapping(uint256 => Stake) public stakes;\\n  // tokenId => amount\\n  mapping(uint256 => uint256) public yieldClaimed;\\n  // tokenId => timestamp\\n  mapping(uint256 => uint256) public lastClaim;\\n  // tokenId => boolean\\n  mapping(uint256 => bool) public isBlacklisted;\\n\\n  Counters.Counter internal _ids;\\n  string private baseTokenURI; // baseTokenURI can point to IPFS folder like https://ipfs.io/ipfs/{cid}/ while\\n  address public paymentAddress;\\n  address public royaltyAddress;\\n\\n  // Royalties basis points (percentage using 2 decimals - 1000 = 100, 500 = 50, 0 = 0)\\n  uint256 private royaltyBasisPoints = 50; // 5%\\n\\n  // array of all the NFT token IDs owned by a user\\n  mapping(address => uint256[]) public allUserOwned;\\n  // the index in the token ID array at allUserOwned to save gas on operations\\n  mapping(uint256 => uint256) public ownedIndex;\\n\\n  mapping(uint256 => uint256) public tokenMintedAt;\\n  mapping(uint256 => uint256) public tokenLastTransferred;\\n\\n  event StakeTokens(\\n    address indexed user,\\n    uint256 indexed tokenId,\\n    uint256 amountStaked,\\n    uint256 lockOptionIndex\\n  );\\n  event UnstakeTokens(address indexed user, uint256 indexed tokenId);\\n  event SetAnnualApr(uint256 indexed newApr);\\n  event SetPaymentAddress(address indexed user);\\n  event SetRoyaltyAddress(address indexed user);\\n  event SetRoyaltyBasisPoints(uint256 indexed _royaltyBasisPoints);\\n  event SetBaseTokenURI(string indexed newUri);\\n  event AddAprLockOption(uint16 indexed apr, uint256 lockTime);\\n  event RemoveAprLockOption(\\n    uint256 indexed index,\\n    uint16 indexed apr,\\n    uint256 lockTime\\n  );\\n  event UpdateAprLockOption(\\n    uint256 indexed index,\\n    uint16 indexed oldApr,\\n    uint256 oldLockTime,\\n    uint16 newApr,\\n    uint256 newLockTime\\n  );\\n  event SetTokenBlacklist(uint256 indexed tokenId, bool isBlacklisted);\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _stakeToken,\\n    address _ydf,\\n    address _vester,\\n    address _rewards,\\n    string memory _baseTokenURI\\n  ) ERC721(_name, _symbol) {\\n    stakeToken = IERC20(_stakeToken);\\n    ydf = IYDF(_ydf);\\n    vester = IYDFVester(_vester);\\n    rewards = IStakeRewards(_rewards);\\n    baseTokenURI = _baseTokenURI;\\n  }\\n\\n  function stake(uint256 _amount, uint256 _lockOptIndex) external virtual {\\n    _stake(msg.sender, _amount, _amount, _lockOptIndex, true);\\n  }\\n\\n  function _stake(\\n    address _user,\\n    uint256 _amountStaked,\\n    uint256 _amountYDFBaseEarn,\\n    uint256 _lockOptIndex,\\n    bool _transferStakeToken\\n  ) internal {\\n    require(_lockOptIndex < _aprLockOptions.length, 'invalid lock option');\\n    _amountStaked = _amountStaked == 0\\n      ? stakeToken.balanceOf(_user)\\n      : _amountStaked;\\n    _amountYDFBaseEarn = _amountYDFBaseEarn == 0\\n      ? _amountStaked\\n      : _amountYDFBaseEarn;\\n    require(\\n      _amountStaked > 0 && _amountYDFBaseEarn > 0,\\n      'must stake and be earning at least some tokens'\\n    );\\n    if (_transferStakeToken) {\\n      stakeToken.transferFrom(_user, address(this), _amountStaked);\\n    }\\n\\n    _ids.increment();\\n    stakes[_ids.current()] = Stake({\\n      created: block.timestamp,\\n      amountStaked: _amountStaked,\\n      amountYDFBaseEarn: _amountYDFBaseEarn,\\n      apr: _aprLockOptions[_lockOptIndex].apr,\\n      lockTime: _aprLockOptions[_lockOptIndex].lockTime\\n    });\\n    _safeMint(_user, _ids.current());\\n    tokenMintedAt[_ids.current()] = block.timestamp;\\n\\n    emit StakeTokens(_user, _ids.current(), _amountStaked, _lockOptIndex);\\n  }\\n\\n  function unstake(uint256 _tokenId) public {\\n    address _user = msg.sender;\\n    Stake memory _tokenStake = stakes[_tokenId];\\n    require(\\n      _user == ownerOf(_tokenId),\\n      'only the owner of the staked tokens can unstake'\\n    );\\n    bool _isUnstakingEarly = block.timestamp <\\n      _tokenStake.created + _tokenStake.lockTime;\\n\\n    // send back original tokens staked\\n    // if unstaking early based on lock period, only get a portion back\\n    if (_isUnstakingEarly) {\\n      uint256 _timeStaked = block.timestamp - _tokenStake.created;\\n      uint256 _earnedAmount = (_tokenStake.amountStaked * _timeStaked) /\\n        _tokenStake.lockTime;\\n      stakeToken.transfer(_user, _earnedAmount);\\n      if (address(stakeToken) == address(ydf)) {\\n        ydf.burn(_tokenStake.amountStaked - _earnedAmount);\\n      } else {\\n        stakeToken.transfer(owner(), _tokenStake.amountStaked - _earnedAmount);\\n      }\\n    } else {\\n      stakeToken.transfer(_user, _tokenStake.amountStaked);\\n    }\\n\\n    // check and create new vest if yield available to be claimed\\n    uint256 _totalEarnedAmount = getTotalEarnedAmount(_tokenId);\\n    if (_totalEarnedAmount > yieldClaimed[_tokenId]) {\\n      _createVestAndMint(_user, _totalEarnedAmount - yieldClaimed[_tokenId]);\\n    }\\n\\n    // this NFT is useless after the user unstakes\\n    _burn(_tokenId);\\n\\n    emit UnstakeTokens(_user, _tokenId);\\n  }\\n\\n  function unstakeMulti(uint256[] memory _tokenIds) external {\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      unstake(_tokenIds[i]);\\n    }\\n  }\\n\\n  function claimAndVestRewards(uint256 _tokenId) public {\\n    require(!isBlacklisted[_tokenId], 'blacklisted NFT');\\n\\n    // user can only claim and vest rewards up to once a week\\n    require(block.timestamp > lastClaim[_tokenId] + ONE_WEEK);\\n    lastClaim[_tokenId] = block.timestamp;\\n\\n    uint256 _totalEarnedAmount = getTotalEarnedAmount(_tokenId);\\n    require(\\n      _totalEarnedAmount > yieldClaimed[_tokenId],\\n      'must have some yield to claim'\\n    );\\n    _createVestAndMint(\\n      ownerOf(_tokenId),\\n      _totalEarnedAmount - yieldClaimed[_tokenId]\\n    );\\n    yieldClaimed[_tokenId] = _totalEarnedAmount;\\n  }\\n\\n  function claimAndVestRewardsMulti(uint256[] memory _tokenIds) external {\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      claimAndVestRewards(_tokenIds[i]);\\n    }\\n  }\\n\\n  function _createVestAndMint(address _user, uint256 _amount) internal {\\n    // store metadata for earned tokens in vesting contract for user who is unstaking\\n    vester.createVest(_user, _amount);\\n    // mint earned tokens to vesting contract\\n    ydf.stakeMintToVester(_amount);\\n  }\\n\\n  // Support royalty info - See {EIP-2981}: https://eips.ethereum.org/EIPS/eip-2981\\n  function royaltyInfo(uint256, uint256 _salePrice)\\n    external\\n    view\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    return (royaltyAddress, (_salePrice * royaltyBasisPoints) / 1000);\\n  }\\n\\n  function tokenURI(uint256 _tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(_exists(_tokenId), 'token does not exist');\\n    return string(abi.encodePacked(_baseURI(), _tokenId.toString(), '.json'));\\n  }\\n\\n  // Contract metadata URI - Support for OpenSea: https://docs.opensea.io/docs/contract-level-metadata\\n  function contractURI() public view returns (string memory) {\\n    return string(abi.encodePacked(_baseURI(), 'contract.json'));\\n  }\\n\\n  // Override supportsInterface - See {IERC165-supportsInterface}\\n  function supportsInterface(bytes4 _interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721Enumerable)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(_interfaceId);\\n  }\\n\\n  function getLastMintedTokenId() external view returns (uint256) {\\n    return _ids.current();\\n  }\\n\\n  function isTokenMinted(uint256 _tokenId) external view returns (bool) {\\n    return _exists(_tokenId);\\n  }\\n\\n  function setPaymentAddress(address _address) external onlyOwner {\\n    paymentAddress = _address;\\n    emit SetPaymentAddress(_address);\\n  }\\n\\n  function setRoyaltyAddress(address _address) external onlyOwner {\\n    royaltyAddress = _address;\\n    emit SetRoyaltyAddress(_address);\\n  }\\n\\n  function setRoyaltyBasisPoints(uint256 _points) external onlyOwner {\\n    royaltyBasisPoints = _points;\\n    emit SetRoyaltyBasisPoints(_points);\\n  }\\n\\n  function setBaseURI(string memory _uri) external onlyOwner {\\n    baseTokenURI = _uri;\\n    emit SetBaseTokenURI(_uri);\\n  }\\n\\n  function getAllUserOwned(address _user)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    return allUserOwned[_user];\\n  }\\n\\n  function getTotalEarnedAmount(uint256 _tokenId)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    Stake memory _tokenStake = stakes[_tokenId];\\n    uint256 _secondsStaked = block.timestamp - _tokenStake.created;\\n    return\\n      (_tokenStake.amountYDFBaseEarn * _tokenStake.apr * _secondsStaked) /\\n      PERCENT_DENOMENATOR /\\n      ONE_YEAR;\\n  }\\n\\n  function getAllLockOptions() external view returns (AprLock[] memory) {\\n    return _aprLockOptions;\\n  }\\n\\n  function addAprLockOption(uint16 _apr, uint256 _lockTime) external onlyOwner {\\n    _addAprLockOption(_apr, _lockTime);\\n    emit AddAprLockOption(_apr, _lockTime);\\n  }\\n\\n  function _addAprLockOption(uint16 _apr, uint256 _lockTime) internal {\\n    _aprLockOptions.push(AprLock({ apr: _apr, lockTime: _lockTime }));\\n  }\\n\\n  function removeAprLockOption(uint256 _index) external onlyOwner {\\n    AprLock memory _option = _aprLockOptions[_index];\\n    _aprLockOptions[_index] = _aprLockOptions[_aprLockOptions.length - 1];\\n    _aprLockOptions.pop();\\n    emit RemoveAprLockOption(_index, _option.apr, _option.lockTime);\\n  }\\n\\n  function updateAprLockOption(\\n    uint256 _index,\\n    uint16 _apr,\\n    uint256 _lockTime\\n  ) external onlyOwner {\\n    AprLock memory _option = _aprLockOptions[_index];\\n    _aprLockOptions[_index] = AprLock({ apr: _apr, lockTime: _lockTime });\\n    emit UpdateAprLockOption(\\n      _index,\\n      _option.apr,\\n      _option.lockTime,\\n      _apr,\\n      _lockTime\\n    );\\n  }\\n\\n  function setIsBlacklisted(uint256 _tokenId, bool _isBlacklisted)\\n    external\\n    onlyOwner\\n  {\\n    isBlacklisted[_tokenId] = _isBlacklisted;\\n    emit SetTokenBlacklist(_tokenId, _isBlacklisted);\\n  }\\n\\n  function _baseURI() internal view override returns (string memory) {\\n    return baseTokenURI;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) internal virtual override(ERC721Enumerable) {\\n    require(!isBlacklisted[_tokenId], 'blacklisted NFT');\\n    tokenLastTransferred[_tokenId] = block.timestamp;\\n\\n    super._beforeTokenTransfer(_from, _to, _tokenId);\\n  }\\n\\n  function _afterTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) internal virtual override(ERC721) {\\n    Stake memory _tokenStake = stakes[_tokenId];\\n\\n    // if from == address(0), token is being minted\\n    if (_from != address(0)) {\\n      uint256 _currIndex = ownedIndex[_tokenId];\\n      uint256 _tokenIdMovingIndices = allUserOwned[_from][\\n        allUserOwned[_from].length - 1\\n      ];\\n      allUserOwned[_from][_currIndex] = allUserOwned[_from][\\n        allUserOwned[_from].length - 1\\n      ];\\n      allUserOwned[_from].pop();\\n      ownedIndex[_tokenIdMovingIndices] = _currIndex;\\n      rewards.setShare(_from, _tokenStake.amountYDFBaseEarn, true);\\n    }\\n\\n    // if to == address(0), token is being burned\\n    if (_to != address(0)) {\\n      ownedIndex[_tokenId] = allUserOwned[_to].length;\\n      allUserOwned[_to].push(_tokenId);\\n      rewards.setShare(_to, _tokenStake.amountYDFBaseEarn, false);\\n    }\\n\\n    super._afterTokenTransfer(_from, _to, _tokenId);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYDFVester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev YDF token vester interface\\n */\\n\\ninterface IYDFVester {\\n  function createVest(address user, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IStakeRewards {\\n  function claimReward(bool compound) external;\\n\\n  function depositRewards() external payable;\\n\\n  function getShares(address wallet) external view returns (uint256);\\n\\n  function setShare(\\n    address shareholder,\\n    uint256 balanceUpdate,\\n    bool isRemoving\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ResetBuySellMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"SetMarketMakingPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"SetTaxExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMintToVester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToBuyTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getSellEarlyExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"getSellEarlyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedYDF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedYDFLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTaxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuyTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mmPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBuySellMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPair\",\"type\":\"bool\"}],\"name\":\"setMarketMakingPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeMintToVester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEarlyPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxMarketingPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRewardsPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"YDF","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}