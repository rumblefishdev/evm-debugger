Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Environment:
    Type: String
  HostedZoneId:
    Type: String
  CloudFrontDistributionId:
    Type: String
  Domain:
    Type: String
  CertificateArn:
    Type: String
  TraceBucketName:
    Type: String
  ApiGatewayAllowOrigin:
    Type: String
  AlchemyKey:
    Type: String
  SentryDsn:
    Type: String
  TransactionTraceProviderImage:
    Type: String
    Default: 428196107266.dkr.ecr.us-east-1.amazonaws.com/transaction-trace-provider:v0.0.2
  TransactionTraceMemory:
    Type: Number
    Default: 4096
  TransactionTraceCpu:
    Type: String
    Default: 1 vCPU

  # Adding new SSM parameters via AWS console, remember to add tag 'Owner: evm-debugger' to them
  EtherscanKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/evm-debugger/secrets/ETHERSCAN_KEY"
  PolygonscanKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/evm-debugger/secrets/POLYGONSCAN_KEY"
  ArbitrumscanKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/evm-debugger/secrets/ARBITRUMSCAN_KEY"

Resources:
  Api:
    Type: AWS::Serverless::Api
    Name: !Sub ${AWS::StackName}-api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowOrigin: !Join ['', ["'", !Ref ApiGatewayAllowOrigin, "'"]]
        AllowHeaders: "'content-type, x-api-key'"
        AllowCredentials: false
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
      Domain:
        CertificateArn: !Ref CertificateArn
        DomainName: !Ref Domain
        Route53:
          HostedZoneId: !Ref HostedZoneId
  
  CustomApiEndpoints:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./endpoints.yml
      Parameters:
        Environment: !Ref Environment
        CertificateArn: !Ref CertificateArn
        DomainName: !Ref Domain
        HostedZoneId: !Ref HostedZoneId
          
  ###################################
  ###### Transaction Trace API ######
  ###################################
  TransactionTraceDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub evm-debugger-${Environment}-trace-ddb
      AttributeDefinitions:
        - AttributeName: txHash
          AttributeType: S
        - AttributeName: type#time
          AttributeType: S
      KeySchema:
        - AttributeName: txHash
          KeyType: HASH
        - AttributeName: type#time
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  TransactionTraceSqsDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub evm-debugger-${Environment}-trace-sqs-dlq

  TransactionTraceSqs:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub evm-debugger-${Environment}-trace-sqs
      VisibilityTimeout: 910
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TransactionTraceSqsDeadLetter.Arn
        maxReceiveCount: 1

  TransactionTraceApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub evm-debugger-${Environment}-transaction-trace-api
      CodeUri: ../transaction-trace-api
      Handler: txTraceApi.analyzeTransactionEntrypoint
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Architectures:
        - x86_64
      Environment:
        Variables:
          TRANSACTION_TRACE_DATA_TABLE_NAME: !Ref TransactionTraceDataTable
          SQS_ANALYZER_URL: !Ref TransactionTraceSqs
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          DISCORD_WEBHOOK: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"
      Events:
        TransactionTraceApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /analyzerData/{txHash}/{chainId}/{gasLimit}
            Method: get
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource:
                - !GetAtt TransactionTraceDataTable.Arn
                - !Sub ${TransactionTraceDataTable.Arn}/**
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt TransactionTraceSqs.Arn
    Metadata:
      BuildMethod: makefile

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: TransactionTraceProviderCluster

  TransactionTraceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-transactionTrace
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Memory: !Ref TransactionTraceMemory
      Cpu: !Ref TransactionTraceCpu
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Image: !Ref TransactionTraceProviderImage
          Essential: true
          Memory: !Ref TransactionTraceMemory
          Name: transactionTraceProvider
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: hardhat
          Environment:
            - Name: ALCHEMY_KEY
              Value: !Ref AlchemyKey
            - Name: TRANSACTION_TRACE_DATA_TABLE_NAME
              Value: !Ref TransactionTraceDataTable
            - Name: ANALYZER_DATA_BUCKET_NAME
              Value: !Ref TraceBucketName
            - Name: CLOUDFRONT_DISTRIBUTION_ID
              Value: !Ref CloudFrontDistributionId
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: SENTRY_DSN
              Value: !Ref SentryDsn
            # HardHat uses env-path for config files, so we need to set it to /tmp/home
            - Name: XDG_DATA_HOME
              Value: /tmp/home/.local/share
            - Name: XDG_CONFIG_HOME
              Value: /tmp/home/.config
            - Name: XDG_CACHE_HOME
              Value: /tmp/home/.cache
            - Name: XDG_STATE_HOME
              Value: /tmp/home/.local/state
            - Name: DISCORD_WEBHOOK
              Value: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeNetworkInterfaces
                  - ecs:DescribeTasks
                  - ssm:GetParameters
                  - secretsmanager:GetSecretValue
                  - kms:Decrypt
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt TransactionTraceDataTable.Arn
                  - !Sub ${TransactionTraceDataTable.Arn}/**
              - Action:
                  - s3:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${TraceBucketName}
                  - !Sub arn:aws:s3:::${TraceBucketName}/**
              - Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}/hardhat

  TransactionTraceSqsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub evm-debugger-${Environment}-transaction-trace-sqs-handler
      CodeUri: ../transaction-trace-provider
      Handler: src/lambdaWrapper.consumeSqsAnalyzeTxEntrypoint
      Runtime: nodejs18.x
      Layers:
        - !Ref TransactionTraceProviderFunctionDepLayer
      Timeout: 900
      MemorySize: 6144
      Architectures:
        - x86_64
      Environment:
        Variables:
          ECS_TASK_ARN: !Ref TransactionTraceTaskDefinition
          ECS_CLUSTER_ARN: !Ref ECSCluster
          ALCHEMY_KEY: !Ref AlchemyKey
          TRANSACTION_TRACE_DATA_TABLE_NAME: !Ref TransactionTraceDataTable
          ANALYZER_DATA_BUCKET_NAME: !Ref TraceBucketName
          CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistributionId
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          # HardHat uses env-path for config files, so we need to set it to /tmp/home
          XDG_DATA_HOME: /tmp/home/.local/share
          XDG_CONFIG_HOME: /tmp/home/.config
          XDG_CACHE_HOME: /tmp/home/.cache
          XDG_STATE_HOME: /tmp/home/.local/state
          DISCORD_WEBHOOK: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TransactionTraceSqs.Arn
            BatchSize: 1
            ScalingConfig:
              MaximumConcurrency: 5
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt TransactionTraceDataTable.Arn
                - !Sub ${TransactionTraceDataTable.Arn}/**
            - Action:
                - s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${TraceBucketName}
                - !Sub arn:aws:s3:::${TraceBucketName}/**
            - Action:
                - cloudfront:CreateInvalidation
              Effect: Allow
              Resource:
                - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistributionId}
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:StopTask
                - ecs:DescribeTasks
              Resource: "*"

    Metadata:
      BuildMethod: makefile

  TransactionTraceProviderFunctionDepLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub evm-debugger-${Environment}-transaction-trace-provider-dependencies
      Description: Dependencies for evm-debugger transaction-trace-provider
      ContentUri: ../transaction-trace-provider/dependencies/
      CompatibleRuntimes:
        - nodejs18.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile

  TransactionTraceSqsDeadLetterHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub evm-debugger-${Environment}-transaction-trace-provider-dlq
      CodeUri: ../transaction-trace-provider
      Handler: src/sqsDeadLetterConsumer.consumeSqsAnalyzeTxErrorEntrypoint
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TRANSACTION_TRACE_DATA_TABLE_NAME: !Ref TransactionTraceDataTable
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          # HardHat uses env-path for config files, so we need to set it to /tmp/home
          XDG_DATA_HOME: /tmp/home/.local/share
          XDG_CONFIG_HOME: /tmp/home/.config
          XDG_CACHE_HOME: /tmp/home/.cache
          XDG_STATE_HOME: /tmp/home/.local/state
          DISCORD_WEBHOOK: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TransactionTraceSqsDeadLetter.Arn
            ScalingConfig:
              MaximumConcurrency: 5
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt TransactionTraceDataTable.Arn
                - !Sub ${TransactionTraceDataTable.Arn}/**
    Metadata:
      BuildMethod: makefile

  # ###################################
  # ######### Source Map API ##########
  # ###################################
  SrcMapContractsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub evm-debugger-${Environment}-srcmap-contracts-ddb
      AttributeDefinitions:
        - AttributeName: address
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
        - AttributeName: chainId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: address
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: ChainIdIndex
          KeySchema:
            - AttributeName: chainId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  SrcMapContractsFetcherSqsDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub evm-debugger-${Environment}-srcmap-contracts-fetcher-sqs-dead-letter
      VisibilityTimeout: 900

  SrcMapContractsFetcherSqs:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub evm-debugger-${Environment}-srcmap-contracts-fetcher-sqs
      VisibilityTimeout: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SrcMapContractsFetcherSqsDeadLetter.Arn
        maxReceiveCount: 3

  SrcMapApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub evm-debugger-${Environment}-srcmap-api
      CodeUri: ../srcmap-api
      Handler: lambdaApi.srcmapApiEntrypoint
      Runtime: nodejs18.x
      Timeout: 180
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          SRCMAP_CONTRACTS_TABLE_NAME: !Ref SrcMapContractsTable
          SQS_FILES_FETCHER_URL: !Ref SrcMapContractsFetcherSqs
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          BUCKET_NAME: !Ref TraceBucketName
          REACT_APP_ETHERSCAN_KEY: !Ref EtherscanKey
          REACT_APP_POLYGONSCAN_KEY: !Ref PolygonscanKey
          REACT_APP_ARBITRUMSCAN_KEY: !Ref ArbitrumscanKey
          DISCORD_WEBHOOK: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"
      Events:
        SrcMapApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /srcmap-api
            Method: post
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource:
                - !GetAtt SrcMapContractsTable.Arn
                - !Sub ${SrcMapContractsTable.Arn}/**
            - Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Effect: Allow
              Resource:
                - '*'
            - Action:
                - lambda:InvokeFunction
              Effect: Allow
              Resource:
                - '*'
            - Action:
                - s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${TraceBucketName}
                - !Sub arn:aws:s3:::${TraceBucketName}/**
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt SrcMapContractsFetcherSqs.Arn
    Metadata:
      BuildMethod: makefile

  SrcMapFetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub evm-debugger-${Environment}-srcmap-fetcher
      CodeUri: ../srcmap-api
      Handler: lambdaFetcher.srcmapFetcherEntrypoint
      Runtime: nodejs18.x
      Timeout: 180
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          SRCMAP_CONTRACTS_TABLE_NAME: !Ref SrcMapContractsTable
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          BUCKET_NAME: !Ref TraceBucketName
          REACT_APP_ETHERSCAN_KEY: !Ref EtherscanKey
          REACT_APP_POLYGONSCAN_KEY: !Ref PolygonscanKey
          REACT_APP_ARBITRUMSCAN_KEY: !Ref ArbitrumscanKey
          DISCORD_WEBHOOK: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SrcMapContractsFetcherSqs.Arn
            ScalingConfig:
              MaximumConcurrency: 5 # based on etherscan rate limits https://docs.etherscan.io/support/rate-limits
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource:
                - !GetAtt SrcMapContractsTable.Arn
                - !Sub ${SrcMapContractsTable.Arn}/**
            - Action:
                - ssm:GetParameter
                - ssm:GetParameters
              Effect: Allow
              Resource:
                - '*'
            - Action:
                - s3:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${TraceBucketName}
                - !Sub arn:aws:s3:::${TraceBucketName}/**
    Metadata:
      BuildMethod: makefile

  SrcMapFetcherDeadLetterQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub evm-debugger-${Environment}-srcmap-fetcher-dlq
      CodeUri: ../srcmap-api
      Handler: lambdaFetcherDlq.srcmapFetcherDeadLetterEntrypoint
      Runtime: nodejs18.x
      Timeout: 180
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          SRCMAP_CONTRACTS_TABLE_NAME: !Ref SrcMapContractsTable
          ENVIRONMENT: !Ref Environment
          SENTRY_DSN: !Ref SentryDsn
          DISCORD_WEBHOOK: !Sub "{{resolve:ssm:/evm-debugger/${Environment}/discord}}"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SrcMapContractsFetcherSqsDeadLetter.Arn
            ScalingConfig:
              MaximumConcurrency: 100
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource:
                - !GetAtt SrcMapContractsTable.Arn
                - !Sub ${SrcMapContractsTable.Arn}/**
    Metadata:
      BuildMethod: makefile
